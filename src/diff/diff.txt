diff --git a/.env.example b/.env.example
index a39d393..b01a433 100644
--- a/.env.example
+++ b/.env.example
@@ -6,7 +6,6 @@ GITLAB_TOKEN=your_gitlab_personal_access_token_here
 PERSONAL_GITHUB_TOKEN=your_github_personal_access_token_here
 GITHUB_TOKEN=your_github_token_here
 GITHUB_REPO=owner/repository-name
-PR_NUMBER=123
 GITHUB_BASE_URL=https://api.github.com
 
 # Slack Configuration
diff --git a/README.md b/README.md
index 4556456..6e6c507 100644
--- a/README.md
+++ b/README.md
@@ -5,26 +5,29 @@ Automatically reviews your code when you push and sends feedback to Slack.
 ## Setup
 
 1. **Install**
+
    ```bash
    npm install
    ```
 
 2. **Configure Environment**
+
    ```bash
    cp .env.example .env
    ```
-   
+
    Edit `.env`:
+
    ```env
    GITHUB_TOKEN=your_github_token_here
    GITHUB_REPO=owner/repository-name
-   PR_NUMBER=123
    SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK
    OPENAI_API_KEY=your_openai_api_key_here
    PORT=3000
    ```
 
 3. **Start Webhook Server**
+
    ```bash
    npm run webhook
    ```
@@ -38,11 +41,13 @@ Automatically reviews your code when you push and sends feedback to Slack.
 ## Usage
 
 **Automatic Mode (Recommended):**
+
 1. Push code to any branch (not main)
 2. Agent automatically reviews changes
 3. Get Slack notifications with feedback
 
 **Manual Mode:**
+
 ```bash
 npm run review
 ```
@@ -52,4 +57,4 @@ npm run review
 1. **Push Code** → GitHub sends webhook
 2. **AI Reviews** → Compares branch vs main
 3. **Slack Alert** → Sends issues + fixes
-4. **Click "Update now"** → Go to GitHub PR
\ No newline at end of file
+4. **Click "Update now"** → Go to GitHub PR
diff --git a/guidelines/examples/diff.result.json b/examples/diff.result.json
similarity index 50%
rename from guidelines/examples/diff.result.json
rename to examples/diff.result.json
index 5759a58..3305db5 100644
--- a/guidelines/examples/diff.result.json
+++ b/examples/diff.result.json
@@ -1,30 +1,5 @@
 {
   "messages": [
-    {
-      "blocks": [
-        {
-          "type": "section",
-          "text": {
-            "type": "mrkdwn",
-            "text": "*AI Code Review Result*\n\n*Original code:*\n```function foo() { console.log(\"test\")}```\n\n*Recommendation:*\n```function foo() {\n  console.log(\"Test\");\n}```"
-          }
-        },
-        {
-          "type": "actions",
-          "elements": [
-            {
-              "type": "button",
-              "text": {
-                "type": "plain_text",
-                "text": "Update now"
-              },
-              "style": "primary",
-              "url": "https://your-ci-pipeline-link-or-github-action"
-            }
-          ]
-        }
-      ]
-    },
     {
       "blocks": [
         {
diff --git a/guidelines/examples/diff.md b/guidelines/examples/diff.md
deleted file mode 100644
index 7994a5b..0000000
--- a/guidelines/examples/diff.md
+++ /dev/null
@@ -1,3124 +0,0 @@
-diff --git a/CLAUDE.md b/CLAUDE.md
-index 772f13b..e2003f7 100644
---- a/CLAUDE.md
-+++ b/CLAUDE.md
-@@ -1,11 +1,12 @@
-
-# CLAUDE.md
-
-## -This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.
-
-## Development Commands
-
-+IMPORTANT: Do not run or request the execution of npm run commands in Claude code.
-
-- - `npm run dev` - Run the agent in development mode using tsx
-    -- `npm run typecheck` - Type check the TypeScript code without emitting files
-    +- `npm run webhook` - Run the webhook server
-    +- `npm run review` - Run the review script
-  ## Architecture
-
-@@ -13,25 +14,25 @@ This is a VoltAgent-based AI agent system built with TypeScript and Node.js. The
-
-### Core Components
-
--- **Agent System**: Built on VoltAgent framework with Anthropic Claude integration
-+- **Agent System**: Built on VoltAgent framework with OpenAI integration
-
-- **Tools**: Zod-schema based tool definitions for structured agent interactions
-- **Logging**: Pino-based structured logging via `@voltagent/logger`
-  -- **AI Provider**: Vercel AI SDK integration for Claude model access
-  +- **AI Provider**: Vercel AI SDK integration for OpenAI model access
-
-### Project Structure
-
-- `src/main.ts` - Entry point that initializes the VoltAgent system
-- The agent is configured with:
-- - Anthropic Claude (opus-4-1 model) via VercelAIProvider
-
-* - OpenAI (gpt-4o-mini model) via VercelAIProvider
-  - Custom tools defined with Zod schemas
-  - Structured logging with configurable levels
-
-### Key Dependencies
-
-- `@voltagent/core` - Main agent framework
-  -- `@ai-sdk/anthropic` - Anthropic model integration
-  +- `openai` - OpenAI model integration
-- `@voltagent/vercel-ai` - Vercel AI provider
-- `zod` - Schema validation for tool parameters
-- `tsx` - TypeScript execution for development
-
--The system uses ES modules and targets Node.js 20 with ES2020 compatibility.
-\ No newline at end of file
-+The system uses ES modules and targets Node.js 20 with ES2020 compatibility.
-diff --git a/MIGRATION_COMPARISON.md b/MIGRATION_COMPARISON.md
-new file mode 100644
-index 0000000..014b630
---- /dev/null
-+++ b/MIGRATION_COMPARISON.md
-@@ -0,0 +1,400 @@
-+# Migration Comparison: Standalone Script vs VoltAgent-Based System
-
-- +## Overview
-- +This document compares the original standalone `review.ts` script with the new VoltAgent-based `review-agent.ts` system, highlighting the architectural improvements and new capabilities.
-- +## Architecture Comparison
-- +### Before: Standalone Script (`review.ts`)
-- +```typescript
-  +// Monolithic script with direct function calls
-  +(async () => {
-- const diff = getDiff();
-- if (!diff.trim()) {
-- process.exit(0);
-- }
--
-- const guidelines = await getGuidelines();
-- const { review, cost, score } = await reviewCode(diff, guidelines);
--
-- if (GITHUB_REPO && PR_NUMBER) {
-- await postReviewToGithub(review, cost, score);
-- }
--
-- process.exit(0);
-  +})();
-  +```
-- +**Characteristics:**
-  +- ❌ Monolithic single-file script
-  +- ❌ Hard-coded workflow sequence
-  +- ❌ No modularity or reusability
-  +- ❌ Direct function calls with no abstraction
-  +- ❌ Limited error handling
-  +- ❌ No tool-level configuration
-  +- ❌ Difficult to test individual components
-- +### After: VoltAgent-Based System (`review-agent.ts`)
-- +```typescript
-  +// Modular tool-based architecture
-  +const reviewAgent = new Agent({
-- name: "comprehensive-code-reviewer",
-- description: "AI-powered code review with modular tools",
-- llm: new VercelAIProvider(),
-- model: openai("gpt-4o"),
-- tools: [
-- gitDiffTool,
-- commitAnalysisTool,
-- loadGuidelinesTool,
-- aiCodeReviewTool,
-- postGitHubReviewTool,
-- comprehensiveReviewTool,
-- ],
-  +});
-- +new VoltAgent({
-- agents: { "review-agent": reviewAgent },
-- logger,
-  +});
-  +```
-- +**Characteristics:**
-  +- ✅ Modular tool-based architecture
-  +- ✅ Configurable workflow orchestration
-  +- ✅ Reusable, composable tools
-  +- ✅ Agent abstraction with intelligent routing
-  +- ✅ Comprehensive error handling per tool
-  +- ✅ Tool-level parameter validation
-  +- ✅ Easy to test and extend
-- +## Feature Comparison
-- +| Feature | Standalone Script | VoltAgent System |
-  +|---------|-------------------|------------------|
-  +| **Git Operations** | Basic diff fetching | ✅ Advanced diff + commit analysis |
-  +| **Guidelines Loading** | Simple file reading | ✅ Multi-source with fallbacks |
-  +| **AI Review** | Fixed prompt/model | ✅ Configurable models + focus areas |
-  +| **GitHub Integration** | Basic PR posting | ✅ Rich formatting + analytics |
-  +| **Error Handling** | Basic try/catch | ✅ Tool-level + contextual errors |
-  +| **Logging** | Simple console logs | ✅ Structured logging with metrics |
-  +| **Configuration** | Environment variables | ✅ Tool parameters + agent config |
-  +| **Testing** | Difficult to test | ✅ Tool-level unit testing |
-  +| **Extensibility** | Hard to extend | ✅ Easy to add new tools |
-  +| **Reusability** | Single-use script | ✅ Composable workflow tools |
-- +## Code Structure Comparison
-- +### Function-by-Function Migration
-- +#### 1. Git Diff Fetching
-- +**Before:**
-  +```typescript
-  +function getDiff(): string {
-- logger.info("Fetching git diff from main branch");
-- return execSync("git fetch origin main && git diff origin/main", {
-- encoding: "utf8",
-- });
-  +}
-  +```
-- +**After:**
-  +```typescript
-  +const gitDiffTool = createTool({
-- name: "get_git_diff",
-- description: "Fetch git diff from main branch or between specific commits",
-- parameters: z.object({
-- baseBranch: z.string().optional().describe("Base branch to compare against"),
-- targetBranch: z.string().optional().describe("Target branch to compare"),
-- fetchLatest: z.boolean().optional().describe("Whether to fetch latest changes"),
-- }),
-- execute: async (input): Promise<GitDiffResult> => {
-- // Flexible implementation with configuration
-- // Structured return type with metadata
-- // Comprehensive error handling
-- },
-  +});
-  +```
-- +**Improvements:**
-  +- ✅ Configurable branch comparison
-  +- ✅ Structured return with metadata
-  +- ✅ Parameter validation with Zod
-  +- ✅ Better error handling and logging
-- +#### 2. Guidelines Loading
-- +**Before:**
-  +```typescript
-  +async function getGuidelines(): Promise<string> {
-- try {
-- const allGuidelines = await guidelinesScanner.scanAllGuidelines();
-- return guidelinesScanner.formatGuidelinesForPrompt(allGuidelines);
-- } catch (error) {
-- // Simple fallback
-- if (fs.existsSync(GUIDELINES_PATH)) {
--      return fs.readFileSync(GUIDELINES_PATH, "utf8");
-- }
-- return "# Default Guidelines...";
-- }
-  +}
-  +```
-- +**After:**
-  +```typescript
-  +const loadGuidelinesTool = createTool({
-- name: "load_guidelines",
-- description: "Load coding guidelines from scanner or fallback files",
-- parameters: z.object({
-- language: z.string().optional(),
-- category: z.string().optional(),
-- includeFallback: z.boolean().optional(),
-- }),
-- execute: async (input) => {
-- // Multi-strategy loading
-- // Language/category-specific options
-- // Detailed metadata about source and content
-- // Robust fallback chain
-- },
-  +});
-  +```
-- +**Improvements:**
-  +- ✅ Language-specific guideline loading
-  +- ✅ Category-based filtering
-  +- ✅ Multiple fallback strategies
-  +- ✅ Detailed source tracking
-- +#### 3. AI Code Review
-- +**Before:**
-  +```typescript
-  +async function reviewCode(
-- diff: string,
-- guidelines: string
-  +): Promise<{ review: ReviewResult; cost: number; score: number }> {
-- // Fixed prompt structure
-- // Hard-coded model (gpt-4o-mini)
-- // Basic cost calculation
-- // Simple JSON parsing
-  +}
-  +```
-- +**After:**
-  +```typescript
-  +const aiCodeReviewTool = createTool({
-- name: "ai_code_review",
-- description: "Comprehensive AI-powered code review with OpenAI GPT",
-- parameters: z.object({
-- diff: z.string(),
-- guidelines: z.string(),
-- model: z.string().optional(),
-- temperature: z.number().optional(),
-- focusAreas: z.array(z.string()).optional(),
-- }),
-- execute: async (input): Promise<AIReviewResponse> => {
-- // Configurable AI model selection
-- // Dynamic focus areas
-- // Advanced cost calculation for multiple models
-- // Robust JSON parsing with fallbacks
-- },
-  +});
-  +```
-- +**Improvements:**
-  +- ✅ Configurable AI models (gpt-4o-mini, gpt-4o, etc.)
-  +- ✅ Custom focus areas for review
-  +- ✅ Advanced cost tracking
-  +- ✅ Better prompt engineering
-  +- ✅ Robust response parsing
-- +#### 4. GitHub Integration
-- +**Before:**
-  +```typescript
-  +async function postReviewToGithub(
-- review: ReviewResult,
-- cost: number,
-- score: number
-  +) {
-- const [owner, repo] = GITHUB_REPO.split("/");
--
-- // Fixed comment format
-- // Basic error handling
-- // Hard-coded PR number from env
-  +}
-  +```
-- +**After:**
-  +```typescript
-  +const postGitHubReviewTool = createTool({
-- name: "post_github_review",
-- description: "Post comprehensive review results to GitHub pull request",
-- parameters: z.object({
-- owner: z.string(),
-- repo: z.string(),
-- pullNumber: z.number(),
-- review: z.object({...}),
-- cost: z.number(),
-- model: z.string().optional(),
-- }),
-- execute: async (input) => {
-- // Flexible repository targeting
-- // Rich comment formatting
-- // Detailed success reporting
-- // Comprehensive error handling
-- },
-  +});
-  +```
-- +**Improvements:**
-  +- ✅ Flexible repository/PR targeting
-  +- ✅ Rich markdown formatting
-  +- ✅ Better analytics display
-  +- ✅ Detailed success/failure reporting
-- +## New Capabilities in VoltAgent System
-- +### 1. Commit Analysis Tool +**New Addition:** Analyze commit history for review context
-- +```typescript
-  +const commitAnalysisTool = createTool({
-- name: "analyze_commits",
-- description: "Analyze commit history and extract metadata",
-- // Provides author info, breaking changes detection, etc.
-  +});
-  +```
-- +### 2. Comprehensive Orchestration +**New Addition:** Complete workflow orchestration
-- +```typescript
-  +const comprehensiveReviewTool = createTool({
-- name: "comprehensive_review",
-- description: "Orchestrate complete workflow from diff to posting",
-- // Coordinates all tools with configuration options
-  +});
-  +```
-- +### 3. Agent Intelligence +**New Addition:** AI-powered tool selection and parameter optimization
-- +The VoltAgent system can intelligently:
-  +- Select appropriate tools based on context
-  +- Optimize parameters for better results  
-  +- Handle complex multi-step workflows
-  +- Provide intelligent error recovery
-- +## Usage Pattern Changes
-- +### Before: Script Execution
-  +```bash
-  +# Environment-dependent execution
-  +GITHUB_REPO=owner/repo PR_NUMBER=123 npm run review
-- +# Limited configuration options
-  +# All-or-nothing execution
-  +# No intermediate results
-  +```
-- +### After: Agent Interaction
-  +```bash
-  +# Start the agent system
-  +npm run review-agent
-- +# Flexible tool usage through agent interface
-  +# Can use individual tools or full workflow
-  +# Rich configuration options
-  +# Intermediate result inspection
-  +```
-- +## Testing Improvements
-- +### Before: Integration Testing Only +`typescript
-+// Difficult to test individual functions
-+// Requires full environment setup
-+// Hard to mock dependencies
-+// All-or-nothing test scenarios
-+`
-- +### After: Unit + Integration Testing
-  +```typescript
-  +// Test individual tools in isolation
-  +import { gitDiffTool, aiCodeReviewTool } from './review-agent';
-- +describe('gitDiffTool', () => {
-- it('should handle different branch configurations', async () => {
-- const result = await gitDiffTool.execute({
--      baseBranch: 'main',
--      fetchLatest: false
-- });
-- expect(result.hasChanges).toBeDefined();
-- });
-  +});
-- +// Easy mocking of tool dependencies
-  +// Granular test scenarios
-  +// Better test coverage
-  +```
-- +## Maintenance Benefits
-- +### Code Organization
-  +- **Before:** 354 lines in single file
-  +- **After:** Organized into focused tools with clear responsibilities
-- +### Error Handling
-  +- **Before:** Basic try/catch blocks
-  +- **After:** Tool-level error handling with context and recovery
-- +### Logging & Debugging
-  +- **Before:** Simple console output
-  +- **After:** Structured logging with metrics and traceability
-- +### Configuration
-  +- **Before:** Environment variables only
-  +- **After:** Tool parameters + agent configuration + environment variables
-- +### Extensibility
-  +- **Before:** Hard to add new features
-  +- **After:** Add new tools easily, compose existing tools differently
-- +## Performance Improvements
-- +| Metric | Standalone | VoltAgent | Improvement |
-  +|--------|------------|-----------|-------------|
-  +| **Startup Time** | ~1s | ~1.5s | Acceptable overhead |
-  +| **Memory Usage** | ~50MB | ~75MB | Reasonable for features |
-  +| **Error Recovery** | None | Graceful | Significant |
-  +| **Observability** | Basic | Comprehensive | Major improvement |
-  +| **Flexibility** | None | High | Major improvement |
-- +## Migration Effort
-- +### Low Risk Migration
-  +- ✅ Same environment variables
-  +- ✅ Same core functionality  
-  +- ✅ Same output formats
-  +- ✅ Backward-compatible execution
-- +### Easy Adoption Path
-  +1. **Phase 1:** Use `npm run review-agent` for same workflow
-  +2. **Phase 2:** Leverage individual tools for custom workflows  
-  +3. **Phase 3:** Add custom tools for specific needs
-  +4. **Phase 4:** Integrate with broader VoltAgent ecosystem
-- +## Conclusion
-- +The VoltAgent-based system represents a significant architectural improvement:
-- +- **35x more modular** (6 tools vs 1 monolith)
-  +- **10x more configurable** (dozens of parameters vs environment variables)
-  +- **5x better error handling** (tool-level vs script-level)
-  +- **Infinitely more extensible** (add tools vs rewrite script)
-- +The migration provides immediate benefits while opening up future possibilities for advanced AI-powered development workflows.
-  diff --git a/REVIEW_AGENT.md b/REVIEW_AGENT.md
-  new file mode 100644
-  index 0000000..2528cdf
-  --- /dev/null
-  +++ b/REVIEW_AGENT.md
-  @@ -0,0 +1,358 @@
-  +# Review Agent - VoltAgent-Based AI Code Review System
-- +## Overview
-- +This document outlines the complete conversion of the standalone `review.ts` script into a comprehensive VoltAgent-based AI agent system. The new `review-agent.ts` provides a modular, tool-based architecture that can handle individual operations or orchestrate complete review workflows.
-- +## ✅ Conversion Checklist Progress
-- +### ✅ Create tools for git operations (diff fetching, commit analysis)
-  +- **`get_git_diff`**: Fetches git diffs from main branch or between specific commits
-  +- **`analyze_commits`**: Analyzes commit history and extracts metadata for review context
-- +### ✅ Add structured code review tool with AI integration
-  +- **`ai_code_review`**: Performs comprehensive AI-powered code review using OpenAI GPT with guidelines
-  +- Supports configurable models, temperature, and focus areas
-  +- Includes cost tracking and structured JSON response parsing
-- +### ✅ Integrate guidelines scanning into review agent
-  +- **`load_guidelines`**: Loads coding guidelines from scanner or fallback files
-  +- Supports language-specific, category-specific, or all guidelines
-  +- Includes fallback mechanisms for robust operation
-- +### ✅ Add pull request posting capabilities as agent tools
-  +- **`post_github_review`**: Posts comprehensive review results to GitHub pull requests
-  +- Formats general review comments and inline comments
-  +- Provides review analytics and cost tracking
-- +### ✅ Create comprehensive review orchestration agent
-  +- **`comprehensive_review`**: Orchestrates the complete code review workflow
-  +- Coordinates all tools in sequence from git diff to posting results
-  +- Provides comprehensive reporting and error handling
-- +## Architecture Overview
-- +The new VoltAgent-based system consists of:
-- +1. **6 specialized tools** for different aspects of code review
-  +2. **1 comprehensive agent** that can use all tools
-  +3. **Robust error handling and logging** throughout
-  +4. **Type-safe interfaces** for all operations
-  +5. **Flexible configuration options** for different use cases
-- +## Tools Reference
-- +### 1. Git Operations Tools
-- +#### `get_git_diff`
-  +Fetches git diff from main branch or between specific commits.
-- +**Parameters:**
-  +- `baseBranch` (optional): Base branch to compare against (defaults to `origin/main`)
-  +- `targetBranch` (optional): Target branch to compare (defaults to current)
-  +- `fetchLatest` (optional): Whether to fetch latest changes first (defaults to `true`)
-- +**Returns:**
-  +```typescript
-  +{
-- diff: string; // The git diff content
-- linesChanged: number; // Number of lines in the diff
-- hasChanges: boolean; // Whether there are actual changes
-  +}
-  +```
-- +#### `analyze_commits`
-  +Analyzes commit history and extracts metadata for review context.
-- +**Parameters:**
-  +- `baseBranch` (optional): Base branch to compare against (defaults to `origin/main`)
-  +- `maxCommits` (optional): Maximum number of commits to analyze (defaults to `10`)
-- +**Returns:**
-  +```typescript
-  +{
-- baseBranch: string;
-- commitsCount: number;
-- commits: CommitDetails[];
-- summary: {
-- totalCommits: number;
-- authors: string[];
-- hasBreakingChanges: boolean;
-- };
-  +}
-  +```
-- +### 2. Guidelines Integration Tool
-- +#### `load_guidelines`
-  +Loads coding guidelines from scanner or fallback files for AI review.
-- +**Parameters:**
-  +- `language` (optional): Specific programming language to load guidelines for
-  +- `category` (optional): Specific guideline category (security, performance, etc.)
-  +- `includeFallback` (optional): Whether to include fallback guidelines if scanner fails
-- +**Returns:**
-  +```typescript
-  +{
-- guidelines: string; // Formatted guidelines content
-- guidelinesCount: number; // Number of guidelines loaded
-- source: string; // Source of guidelines (scanner-\*, file-fallback, etc.)
-- language: string; // Language or "all"
-- category: string; // Category or "all"
-- length: number; // Character length of guidelines
-  +}
-  +```
-- +### 3. AI Review Tool
-- +#### `ai_code_review`
-  +Performs comprehensive AI-powered code review using OpenAI GPT with guidelines.
-- +**Parameters:**
-  +- `diff`: Git diff content to review
-  +- `guidelines`: Coding guidelines to apply during review
-  +- `model` (optional): OpenAI model to use (defaults to `gpt-4o-mini`)
-  +- `temperature` (optional): Temperature for AI generation (defaults to `0.1`)
-  +- `focusAreas` (optional): Specific areas to focus on (security, performance, etc.)
-- +**Returns:**
-  +```typescript
-  +{
-- review: {
-- summary: string;
-- score: number;
-- generalComments: string;
-- inlineComments: InlineComment[];
-- };
-- cost: number; // USD cost of AI generation
-- score: number; // Quality score 0-100
-  +}
-  +```
-- +### 4. GitHub Integration Tool
-- +#### `post_github_review`
-  +Posts comprehensive review results to GitHub pull request.
-- +**Parameters:**
-  +- `owner`: GitHub repository owner
-  +- `repo`: GitHub repository name
-  +- `pullNumber`: Pull request number
-  +- `review`: Review results to post
-  +- `cost`: AI generation cost in USD
-  +- `model` (optional): AI model used for review
-- +**Returns:**
-  +```typescript
-  +{
-- owner: string;
-- repo: string;
-- pullNumber: number;
-- generalCommentPosted: boolean;
-- inlineCommentsPosted: number;
-- totalComments: number;
-- reviewUrl: string;
-  +}
-  +```
-- +### 5. Orchestration Tool
-- +#### `comprehensive_review`
-  +Orchestrates the complete code review workflow from git diff to posting results.
-- +**Parameters:**
-  +- `repoOwner`: Repository owner (for GitHub posting)
-  +- `repoName`: Repository name (for GitHub posting)
-  +- `pullNumber`: Pull request number (for GitHub posting)
-  +- `baseBranch` (optional): Base branch to compare against (defaults to `origin/main`)
-  +- `language` (optional): Primary programming language for guidelines
-  +- `focusAreas` (optional): Specific review focus areas
-  +- `aiModel` (optional): AI model to use (defaults to `gpt-4o-mini`)
-  +- `postToGitHub` (optional): Whether to post results to GitHub (defaults to `true`)
-- +**Returns:** Comprehensive result object with all workflow steps' results.
-- +## Usage Examples
-- +### Running the VoltAgent System
-- +```bash
-  +# Start the review agent system
-  +npm run review-agent
-- +# Alternative: Use the Volt CLI
-  +npm run volt
-  +```
-- +### Using Individual Tools
-- +Once the agent is running, you can interact with individual tools through the VoltAgent interface:
-- +```typescript
-  +// Example: Get git diff
-  +await reviewAgent.execute("get_git_diff", {
-- baseBranch: "main",
-- fetchLatest: true
-  +});
-- +// Example: Load guidelines for TypeScript
-  +await reviewAgent.execute("load_guidelines", {
-- language: "typescript",
-- includeFallback: true
-  +});
-- +// Example: Perform AI review
-  +await reviewAgent.execute("ai_code_review", {
-- diff: "...",
-- guidelines: "...",
-- model: "gpt-4o",
-- focusAreas: ["security", "performance"]
-  +});
-  +```
-- +### Running Complete Workflow
-- +```typescript
-  +// Execute comprehensive review
-  +await reviewAgent.execute("comprehensive_review", {
-- repoOwner: "myorg",
-- repoName: "myrepo",
-- pullNumber: 123,
-- baseBranch: "main",
-- language: "typescript",
-- focusAreas: ["security", "performance", "maintainability"],
-- aiModel: "gpt-4o-mini",
-- postToGitHub: true
-  +});
-  +```
-- +## Key Improvements Over Standalone Script
-- +### 1. Modular Architecture
-  +- Each function is now a separate, reusable tool
-  +- Tools can be used independently or as part of workflows
-  +- Easy to test, debug, and extend individual components
-- +### 2. Enhanced Error Handling
-  +- Tool-level error handling with detailed logging
-  +- Graceful fallbacks for missing dependencies
-  +- Structured error responses with context
-- +### 3. Better Observability
-  +- Comprehensive logging at every step
-  +- Performance metrics and timing
-  +- Cost tracking for AI operations
-  +- Detailed metadata collection
-- +### 4. Flexibility and Configuration
-  +- Configurable AI models and parameters
-  +- Optional workflow steps (e.g., can skip GitHub posting)
-  +- Multiple guideline loading strategies
-  +- Customizable focus areas for reviews
-- +### 5. Type Safety
-  +- Strong TypeScript interfaces for all operations
-  +- Zod schema validation for tool parameters
-  +- Compile-time type checking for all data flows
-- +### 6. Extensibility
-  +- Easy to add new tools for other platforms (GitLab, Bitbucket)
-  +- Pluggable guideline sources
-  +- Support for additional AI providers
-  +- Configurable output formats
-- +## Environment Variables
-- +The review agent uses the same environment variables as the original script:
-- +```env
-  +# Required for AI review
-  +OPENAI_API_KEY=your_openai_api_key
-- +# Required for GitHub integration
-  +GITHUB_TOKEN=your_github_token
-  +GITHUB_REPO=owner/repo
-  +PR_NUMBER=123
-- +# Optional configuration
-  +LOG_LEVEL=info
-  +```
-- +## Monitoring and Analytics
-- +The VoltAgent system provides comprehensive monitoring:
-- +- **Performance Metrics**: Processing times for each tool
-  +- **Cost Tracking**: Detailed AI usage and costs
-  +- **Quality Metrics**: Review scores and issue counts
-  +- **Success Rates**: Tool execution success/failure rates
-  +- **Usage Patterns**: Most used tools and workflows
-- +## Migration Path
-- +To migrate from the standalone script to the VoltAgent system:
-- +1. **Immediate**: Start using `npm run review-agent` instead of `npm run review`
-  +2. **Integration**: Update CI/CD scripts to use the new agent endpoint
-  +3. **Customization**: Leverage new configuration options for your specific needs
-  +4. **Extension**: Add custom tools for your specific workflow requirements
-- +## Troubleshooting
-- +### Common Issues
-- +1. **Git Operations Fail**
-- - Ensure you're in a git repository
-- - Check that `origin/main` branch exists
-- - Verify git credentials and permissions
-- +2. **Guidelines Loading Fails**
-- - Check if `GuidelinesScanner` is properly initialized
-- - Verify guidelines directory exists
-- - Fallback guidelines will be used automatically
-- +3. **AI Review Fails**
-- - Verify `OPENAI_API_KEY` is set
-- - Check API rate limits and quotas
-- - Ensure diff content is not too large (GPT token limits)
-- +4. **GitHub Posting Fails**
-- - Verify `GITHUB_TOKEN` has proper permissions
-- - Check repository access and PR existence
-- - Ensure PR is in open state for comment posting
-- +### Debug Mode
-- +Enable debug logging for detailed troubleshooting:
-- +`env
-+LOG_LEVEL=debug
-+`
-- +This will provide detailed information about each tool's execution, parameter validation, and internal operations.
-- +## Future Enhancements
-- +The VoltAgent architecture makes it easy to add:
-- +- **GitLab Integration**: Similar tools for GitLab MR commenting
-  +- **Multiple AI Providers**: Support for Claude, Gemini, etc.
-  +- **Custom Review Rules**: Domain-specific review criteria
-  +- **Batch Processing**: Review multiple PRs at once
-  +- **Review Templates**: Customizable review formats
-  +- **Integration APIs**: REST/GraphQL endpoints for external systems
-  +- **Review History**: Tracking and analytics over time
-  +- **Team Configurations**: Role-based review settings
-- +## Contributing
-- +To add new tools or enhance existing ones:
-- +1. Follow the existing tool pattern with Zod validation
-  +2. Add comprehensive error handling and logging
-  +3. Include TypeScript types for all interfaces
-  +4. Add unit tests for tool logic
-  +5. Update this documentation
-- +The VoltAgent architecture makes the codebase much more maintainable and extensible for future development.
-  diff --git a/guidelines/general.md b/guidelines/general.md
-  new file mode 100644
-  index 0000000..d809f5a
-  --- /dev/null
-  +++ b/guidelines/general.md
-  @@ -0,0 +1,28 @@
-  +# Role
-- +You are a senior software engineer performing a code review on a pull request.
-- +# Objective
-- +# Review Rules
-- +1. Only check the files and folders mentioned in **Instructions**.
-  +2.
-  +3. If you find an issue:
-- - Show the **original code** (or relevant snippet).
-- - Show the **corrected version** based on the guideline.
-- - Explain briefly why the change is needed.
-    +4. If no issue is found, state `"No issues found based on the provided guidelines."`
-- +# Instructions
-- +- **Target folders:** `/src/api`, `/src/services`
-  +- **Target file types:** `.ts`, `.tsx`
-  +- **Ignore:** `/tests`, `/scripts`, `node_modules`
-  +- **Style examples:** See `/docs/coding-style.md`
-  +- **Performance rules:** See `/docs/performance.md`
-  +- **Security checks:** See `/docs/security.md`
-- +# Output Format
-- +Use the following format for each finding:
-  diff --git a/guidelines/javascript/best-practices.md b/guidelines/javascript/best-practices.md
-  deleted file mode 100644
-  index fbc7ae9..0000000
-  --- a/guidelines/javascript/best-practices.md
-  +++ /dev/null
-  @@ -1,75 +0,0 @@
-  -# JavaScript Best Practices
-
-* -## Code Quality Guidelines
-* -### 1. Use Modern JavaScript Features -**Good:**
-  -```javascript
-  -const fetchUserData = async (userId) => {
-* try {
-* const response = await fetch(`/api/users/${userId}`);
-* const user = await response.json();
-* return user;
-* } catch (error) {
-* console.error('Failed to fetch user:', error);
-* throw error;
-* }
-  -};
-  -```
-* -**Bad:**
-  -```javascript
-  -function fetchUserData(userId, callback) {
-* var xhr = new XMLHttpRequest();
-* xhr.open('GET', '/api/users/' + userId);
-* xhr.onreadystatechange = function() {
-* if (xhr.readyState === 4) {
-*      if (xhr.status === 200) {
-*        callback(null, JSON.parse(xhr.responseText));
-*      } else {
-*        callback(new Error('Request failed'));
-*      }
-* }
-* };
-* xhr.send();
-  -}
-  -```
-* -### 2. Error Handling -**Good:**
-  -```javascript
-  -const processData = (data) => {
-* if (!data || typeof data !== 'object') {
-* throw new Error('Invalid data provided');
-* }
-*
-* return data.items?.map(item => ({
-* id: item.id,
-* name: item.name?.trim() || 'Unknown'
-* })) || [];
-  -};
-  -```
-* -**Bad:**
-  -```javascript
-  -const processData = (data) => {
-* return data.items.map(item => ({
-* id: item.id,
-* name: item.name.trim()
-* }));
-  -};
-  -```
-* -### 3. Function Design
-  -- Keep functions small and focused
-  -- Use descriptive names
-  -- Avoid deep nesting
-  -- Return early when possible
-* -### 4. Common Issues to Flag
-  -- Missing error handling
-  -- Unused variables
-  -- Console.log statements in production
-  -- Hardcoded values
-  -- Deep nesting (> 3 levels)
-  -- Functions longer than 50 lines
-  \ No newline at end of file
-  diff --git a/guidelines/performance/optimization.md b/guidelines/performance/optimization.md
-  deleted file mode 100644
-  index f0c4de4..0000000
-  --- a/guidelines/performance/optimization.md
-  +++ /dev/null
-  @@ -1,95 +0,0 @@
-  -# Performance Optimization Guidelines
-* -## Common Performance Issues
-* -### 1. Inefficient Loops -**Good:**
-  -```javascript
-  -const processLargeArray = (items) => {
-* const result = new Map();
-*
-* for (const item of items) {
-* if (item.active) {
-*      result.set(item.id, item.name);
-* }
-* }
-*
-* return result;
-  -};
-  -```
-* -**Bad:**
-  -```javascript
-  -const processLargeArray = (items) => {
-* const result = {};
-*
-* items.forEach(item => {
-* items.forEach(innerItem => { // Nested O(n²) loop
-*      if (item.id === innerItem.relatedId) {
-*        result[item.id] = item.name;
-*      }
-* });
-* });
-*
-* return result;
-  -};
-  -```
-* -### 2. Memory Leaks -**Good:**
-  -```javascript
-  -const createEventHandler = () => {
-* const handler = (event) => {
-* console.log('Event handled:', event.type);
-* };
-*
-* element.addEventListener('click', handler);
-*
-* // Cleanup
-* return () => {
-* element.removeEventListener('click', handler);
-* };
-  -};
-  -```
-* -**Bad:**
-  -```javascript
-  -const createEventHandler = () => {
-* element.addEventListener('click', (event) => {
-* console.log('Event handled:', event.type);
-* });
-* // No cleanup - memory leak
-  -};
-  -```
-* -### 3. Async Operations -**Good:**
-  -```javascript
-  -const fetchUserData = async (userIds) => {
-* const promises = userIds.map(id => fetchUser(id));
-* const users = await Promise.all(promises);
-* return users.filter(Boolean);
-  -};
-  -```
-* -**Bad:**
-  -```javascript
-  -const fetchUserData = async (userIds) => {
-* const users = [];
-* for (const id of userIds) {
-* const user = await fetchUser(id); // Sequential, slow
-* if (user) users.push(user);
-* }
-* return users;
-  -};
-  -```
-* -### 4. Performance Issues to Flag
-  -- O(n²) or worse algorithmic complexity
-  -- Unnecessary API calls in loops
-  -- Large objects in memory without cleanup
-  -- Synchronous file operations
-  -- Missing pagination for large datasets
-  -- Inefficient database queries
-  -- Large bundle sizes
-  -- Unused dependencies
-  \ No newline at end of file
-  diff --git a/guidelines/python/best-practices.md b/guidelines/python/best-practices.md
-  deleted file mode 100644
-  index d999d6b..0000000
-  --- a/guidelines/python/best-practices.md
-  +++ /dev/null
-  @@ -1,77 +0,0 @@
-  -# Python Best Practices
-* -## Code Quality Guidelines
-* -### 1. Pythonic Code -**Good:**
-  -```python
-  -def process_users(users: list[dict]) -> list[str]:
-* return [
-*        user['name'].title()
-*        for user in users
-*        if user.get('active', False)
-* ]
-  -```
-* -**Bad:**
-  -```python
-  -def process_users(users):
-* result = []
-* for i in range(len(users)):
-*        if users[i]['active'] == True:
-*            result.append(users[i]['name'].title())
-* return result
-  -```
-* -### 2. Exception Handling -**Good:**
-  -```python
-  -import logging
-  -from typing import Optional
-* -def fetch_user_data(user_id: str) -> Optional[dict]:
-* try:
-*        response = requests.get(f"/api/users/{user_id}")
-*        response.raise_for_status()
-*        return response.json()
-* except requests.RequestException as e:
-*        logging.error(f"Failed to fetch user {user_id}: {e}")
-*        return None
-  -```
-* -**Bad:**
-  -```python
-  -def fetch_user_data(user_id):
-* try:
-*        response = requests.get(f"/api/users/{user_id}")
-*        return response.json()
-* except:
-*        pass
-  -```
-* -### 3. Type Hints -**Good:**
-  -```python
-  -from typing import List, Dict, Optional
-  -from dataclasses import dataclass
-* -@dataclass
-  -class User:
-* id: str
-* name: str
-* email: str
-* active: bool = True
-* -def get_active_users(users: List[User]) -> List[User]:
-* return [user for user in users if user.active]
-  -```
-* -### 4. Common Python Issues
-  -- Missing type hints
-  -- Bare except clauses
-  -- Mutable default arguments
-  -- Not using context managers for files
-  -- Global variables
-  -- Long functions (>50 lines)
-  -- Deep nesting
-  -- Not following PEP 8
-  \ No newline at end of file
-  diff --git a/guidelines/security/common-vulnerabilities.md b/guidelines/security/common-vulnerabilities.md
-  deleted file mode 100644
-  index c127cbc..0000000
-  --- a/guidelines/security/common-vulnerabilities.md
-  +++ /dev/null
-  @@ -1,75 +0,0 @@
-  -# Security Guidelines
-* -## Common Security Vulnerabilities to Check
-* -### 1. SQL Injection Prevention -**Good:**
-  -```javascript
-  -const getUserById = async (id) => {
-* const query = 'SELECT \* FROM users WHERE id = ?';
-* return db.query(query, [id]);
-  -};
-  -```
-* -**Bad:**
-  -```javascript
-  -const getUserById = async (id) => {
-* const query = `SELECT * FROM users WHERE id = ${id}`;
-* return db.query(query);
-  -};
-  -```
-* -### 2. XSS Prevention -**Good:**
-  -```javascript
-  -import { escape } from 'html-escaper';
-* -const renderUserContent = (content) => {
-* return escape(content);
-  -};
-  -```
-* -**Bad:**
-  -```javascript
-  -const renderUserContent = (content) => {
-* return `<div>${content}</div>`;
-  -};
-  -```
-* -### 3. Authentication & Authorization -**Good:**
-  -```javascript
-  -const requireAuth = (req, res, next) => {
-* const token = req.headers.authorization?.replace('Bearer ', '');
-*
-* if (!token || !verifyToken(token)) {
-* return res.status(401).json({ error: 'Unauthorized' });
-* }
-*
-* next();
-  -};
-  -```
-* -### 4. Secrets Management -**Never hardcode:**
-  -- API keys
-  -- Database passwords
-  -- JWT secrets
-  -- Third-party tokens
-* -**Use environment variables:**
-  -```javascript
-  -const apiKey = process.env.API_KEY;
-  -if (!apiKey) {
-* throw new Error('API_KEY environment variable is required');
-  -}
-  -```
-* -### 5. Security Issues to Flag
-  -- Hardcoded credentials
-  -- Unvalidated user input
-  -- Missing authentication
-  -- Insecure randomness
-  -- Path traversal vulnerabilities
-  -- Missing HTTPS enforcement
-  -- Exposed sensitive data in logs
-  \ No newline at end of file
-  diff --git a/guidelines/typescript/patterns.md b/guidelines/ts/patterns.md
-  similarity index 71%
-  rename from guidelines/typescript/patterns.md
-  rename to guidelines/ts/patterns.md
-  index 335737e..6f9df58 100644
-  --- a/guidelines/typescript/patterns.md
-  +++ b/guidelines/ts/patterns.md
-  @@ -3,7 +3,9 @@
-  ## Type Safety Best Practices
-  ### 1. Interface Design
-
-- **Good:**
-- ```typescript
-  interface User {
-    readonly id: string;
-  @@ -14,28 +16,20 @@ interface User {
-  }
-
-  interface UserPreferences {
-  ```
-
-* theme: 'light' | 'dark';
-
-- theme: "light" | "dark";
-  notifications: boolean;
-  language: string;
-  }
-
-````
-
--**Bad:**
--```typescript
--interface User {
--  id: any;
--  name: any;
--  email: any;
--  preferences: any;
--}
--```
--
-### 2. Generic Types
-+
-**Good:**
-+
-```typescript
-interface ApiResponse<T> {
-  data: T;
--  status: 'success' | 'error';
-+  status: "success" | "error";
-  message?: string;
-}
-
-@@ -46,19 +40,22 @@ const fetchUser = async (id: string): Promise<ApiResponse<User>> => {
-````
-
-### 3. Union Types and Guards
-
-- **Good:**
-- ```typescript
-  -type Status = 'loading' | 'success' | 'error';
-  +type Status = "loading" | "success" | "error";
-
-  -const isErrorStatus = (status: Status): status is 'error' => {
-  ```
-
-* return status === 'error';
-  +const isErrorStatus = (status: Status): status is "error" => {
-
-- return status === "error";
-  };
-
-```
-
-### 4. Common TypeScript Issues
-+
-- Using `any` instead of proper types
-- Missing return type annotations
-- Not using strict mode
-- Ignoring TypeScript errors with `@ts-ignore`
-- Missing null/undefined checks
--- Not using readonly for immutable data
-\ No newline at end of file
-+- Not using readonly for immutable data
-diff --git a/package-lock.json b/package-lock.json
-index 6002e55..da583a2 100644
---- a/package-lock.json
-+++ b/package-lock.json
-@@ -9,6 +9,7 @@
-      "version": "1.0.0",
-      "license": "MIT",
-      "dependencies": {
-+        "@ai-sdk/anthropic": "^2.0.2",
-        "@ai-sdk/openai": "^2.0.10",
-        "@gitbeaker/rest": "^43.4.0",
-        "@octokit/rest": "^22.0.0",
-@@ -29,6 +30,38 @@
-        "typescript": "^5.0.0"
-      }
-    },
-+    "node_modules/@ai-sdk/anthropic": {
-+      "version": "2.0.2",
-+      "resolved": "https://registry.npmjs.org/@ai-sdk/anthropic/-/anthropic-2.0.2.tgz",
-+      "integrity": "sha512-R3xmEbbntgdKo/S3TDuW77RYALpo/OKQm4oSjQmryDAFiVGB6X6guZAr7FWt48C4fKGROScAu+y1MJTbzisfOQ==",
-+      "dependencies": {
-+        "@ai-sdk/provider": "2.0.0",
-+        "@ai-sdk/provider-utils": "3.0.2"
-+      },
-+      "engines": {
-+        "node": ">=18"
-+      },
-+      "peerDependencies": {
-+        "zod": "^3.25.76 || ^4"
-+      }
-+    },
-+    "node_modules/@ai-sdk/anthropic/node_modules/@ai-sdk/provider-utils": {
-+      "version": "3.0.2",
-+      "resolved": "https://registry.npmjs.org/@ai-sdk/provider-utils/-/provider-utils-3.0.2.tgz",
-+      "integrity": "sha512-0a5a6VafkV6+0irdpqnub8WE6qzG2VMsDBpXb9NQIz8c4TG8fI+GSTFIL9sqrLEwXrHdiRj7fwJsrir4jClL0w==",
-+      "dependencies": {
-+        "@ai-sdk/provider": "2.0.0",
-+        "@standard-schema/spec": "^1.0.0",
-+        "eventsource-parser": "^3.0.3",
-+        "zod-to-json-schema": "^3.24.1"
-+      },
-+      "engines": {
-+        "node": ">=18"
-+      },
-+      "peerDependencies": {
-+        "zod": "^3.25.76 || ^4"
-+      }
-+    },
-    "node_modules/@ai-sdk/gateway": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/@ai-sdk/gateway/-/gateway-1.0.4.tgz",
-diff --git a/package.json b/package.json
-index a45015d..965cc0d 100644
---- a/package.json
-+++ b/package.json
-@@ -7,8 +7,11 @@
-    "build": "tsc",
-    "dev": "tsx watch --env-file=.env ./src/main.ts",
-    "webhook": "tsx watch --env-file=.env ./src/webhook-main.ts",
-+    "review": "tsx watch --env-file=.env ./src/review.ts",
-+    "review-agent": "tsx watch --env-file=.env ./src/review-agent.ts",
-    "start": "node dist/index.js",
--    "volt": "volt"
-+    "volt": "volt",
-+    "v2": "tsx watch --env-file=.env ./src/main.ts"
-  },
-  "keywords": [
-    "gitlab",
-@@ -22,6 +25,7 @@
-    "typescript": "^5.0.0"
-  },
-  "dependencies": {
-+    "@ai-sdk/anthropic": "^2.0.2",
-    "@ai-sdk/openai": "^2.0.10",
-    "@gitbeaker/rest": "^43.4.0",
-    "@octokit/rest": "^22.0.0",
-diff --git a/src/ai-review-service.ts b/src/ai-review-service.ts
-index cc53cbd..0bf7e38 100644
---- a/src/ai-review-service.ts
-+++ b/src/ai-review-service.ts
-@@ -97,11 +97,10 @@ ${content}
-
-## REVIEW REQUIREMENTS
-Provide a comprehensive code review focusing on:
--1. Security vulnerabilities (hardcoded secrets, SQL injection, XSS, etc.)
--2. Performance issues (inefficient algorithms, memory leaks, etc.)
--3. Code style and best practices
--4. Logic errors and potential bugs
--5. Maintainability and readability
-+1. Security vulnerabilities
-+2. Code style and best practices
-+3. Logic errors and potential bugs
-+4. Maintainability and readability
-
-## RESPONSE FORMAT
-Return your response as a JSON object with this exact structure:
-diff --git a/src/github-service.ts b/src/github-service.ts
-index d4c5478..d1e1646 100644
---- a/src/github-service.ts
-+++ b/src/github-service.ts
-@@ -353,4 +353,204 @@ export class GitHubService {
-      );
-    }
-  }
-+
-+  /**
-+   * Post a regular comment to a pull request issue
-+   */
-+  async postPullRequestComment(
-+    owner: string,
-+    repo: string,
-+    pullNumber: number,
-+    body: string
-+  ) {
-+    logger.debug("Posting pull request comment", { owner, repo, pullNumber });
-+
-+    try {
-+      // Try posting as a regular issue comment first (requires less permissions)
-+      const response = await this.octokit.rest.issues.createComment({
-+        owner,
-+        repo,
-+        issue_number: pullNumber,
-+        body,
-+      });
-+
-+      logger.info("Pull request comment posted successfully", {
-+        owner,
-+        repo,
-+        pullNumber,
-+        commentId: response.data.id,
-+      });
-+
-+      return response.data;
-+    } catch (error) {
-+      logger.error("Failed to post pull request comment", {
-+        owner,
-+        repo,
-+        pullNumber,
-+        error: error instanceof Error ? error.message : "Unknown error",
-+      });
-+      throw new Error(
-+        `Failed to post pull request comment: ${
-+          error instanceof Error ? error.message : "Unknown error"
-+        }`
-+      );
-+    }
-+  }
-+
-+  /**
-+   * Post a review to a pull request (requires more permissions)
-+   */
-+  async postPullRequestReview(
-+    owner: string,
-+    repo: string,
-+    pullNumber: number,
-+    body: string
-+  ) {
-+    logger.debug("Posting pull request review", { owner, repo, pullNumber });
-+
-+    try {
-+      const response = await this.octokit.rest.pulls.createReview({
-+        owner,
-+        repo,
-+        pull_number: pullNumber,
-+        body,
-+        event: "COMMENT",
-+      });
-+
-+      logger.info("Pull request review posted successfully", {
-+        owner,
-+        repo,
-+        pullNumber,
-+        reviewId: response.data.id,
-+      });
-+
-+      return response.data;
-+    } catch (error) {
-+      logger.error("Failed to post pull request review", {
-+        owner,
-+        repo,
-+        pullNumber,
-+        error: error instanceof Error ? error.message : "Unknown error",
-+      });
-+      throw new Error(
-+        `Failed to post pull request review: ${
-+          error instanceof Error ? error.message : "Unknown error"
-+        }`
-+      );
-+    }
-+  }
-+
-+  /**
-+   * Post inline comments on specific lines in a pull request
-+   */
-+  async postInlineReviewComments(
-+    owner: string,
-+    repo: string,
-+    pullNumber: number,
-+    comments: Array<{
-+      path: string;
-+      line: number;
-+      body: string;
-+      side?: "LEFT" | "RIGHT";
-+    }>
-+  ) {
-+    logger.debug("Posting inline review comments", {
-+      owner,
-+      repo,
-+      pullNumber,
-+      commentsCount: comments.length,
-+    });
-+
-+    try {
-+      // Get the pull request details to get the latest commit SHA
-+      const pullRequest = await this.octokit.rest.pulls.get({
-+        owner,
-+        repo,
-+        pull_number: pullNumber,
-+      });
-+
-+      const commitSha = pullRequest.data.head.sha;
-+
-+      // Create a review with inline comments
-+      const response = await this.octokit.rest.pulls.createReview({
-+        owner,
-+        repo,
-+        pull_number: pullNumber,
-+        event: "COMMENT",
-+        commit_id: commitSha,
-+        comments: comments.map((comment) => ({
-+          path: comment.path,
-+          line: comment.line,
-+          body: comment.body,
-+          side: comment.side || "RIGHT",
-+        })),
-+      });
-+
-+      logger.info("Inline review comments posted successfully", {
-+        owner,
-+        repo,
-+        pullNumber,
-+        reviewId: response.data.id,
-+        commentsCount: comments.length,
-+      });
-+
-+      return response.data;
-+    } catch (error) {
-+      logger.error("Failed to post inline review comments", {
-+        owner,
-+        repo,
-+        pullNumber,
-+        commentsCount: comments.length,
-+        error: error instanceof Error ? error.message : "Unknown error",
-+      });
-+      throw new Error(
-+        `Failed to post inline review comments: ${
-+          error instanceof Error ? error.message : "Unknown error"
-+        }`
-+      );
-+    }
-+  }
-+
-+  /**
-+   * Get the diff for a pull request
-+   */
-+  async getPullRequestDiff(
-+    owner: string,
-+    repo: string,
-+    pullNumber: number
-+  ): Promise<string> {
-+    logger.debug("Fetching pull request diff", { owner, repo, pullNumber });
-+
-+    try {
-+      const response = await this.octokit.rest.pulls.get({
-+        owner,
-+        repo,
-+        pull_number: pullNumber,
-+        mediaType: {
-+          format: "diff",
-+        },
-+      });
-+
-+      logger.info("Pull request diff fetched successfully", {
-+        owner,
-+        repo,
-+        pullNumber,
-+        diffLength: (response.data as any).length,
-+      });
-+
-+      return response.data as any;
-+    } catch (error) {
-+      logger.error("Failed to fetch pull request diff", {
-+        owner,
-+        repo,
-+        pullNumber,
-+        error: error instanceof Error ? error.message : "Unknown error",
-+      });
-+      throw new Error(
-+        `Failed to fetch pull request diff: ${
-+          error instanceof Error ? error.message : "Unknown error"
-+        }`
-+      );
-+    }
-+  }
-}
-diff --git a/src/guidelines-scanner.ts b/src/guidelines-scanner.ts
-index d83c396..eb1d74e 100644
---- a/src/guidelines-scanner.ts
-+++ b/src/guidelines-scanner.ts
-@@ -1,11 +1,11 @@
--import { readdir, readFile } from 'fs/promises';
--import { join, extname } from 'path';
--import { createPinoLogger } from '@voltagent/logger';
--import { configuration } from './configulation';
-+import { readdir, readFile } from "fs/promises";
-+import { join, extname } from "path";
-+import { createPinoLogger } from "@voltagent/logger";
-+import { configuration } from "./configulation";
-
-// Create logger for guidelines scanner
-const logger = createPinoLogger({
--  name: 'guidelines-scanner',
-+  name: "guidelines-scanner",
-  level: configuration.logging.level as any,
-});
-
-@@ -22,47 +22,52 @@ export class GuidelinesScanner {
-
-  constructor(guidelinesDir: string = configuration.guidelines.directory) {
-    this.guidelinesDir = guidelinesDir;
--    logger.debug('Guidelines scanner initialized', { guidelinesDir });
-+    logger.debug("Guidelines scanner initialized", { guidelinesDir });
-  }
-
-  /**
-   * Scan all guidelines and return relevant ones for the given language
-   */
--  async getGuidelinesForLanguage(language: string): Promise<GuidelineContent[]> {
-+  async getGuidelinesForLanguage(
-+    language: string
-+  ): Promise<GuidelineContent[]> {
-    const cacheKey = language.toLowerCase();
--    logger.debug('Getting guidelines for language', { language, cacheKey });
--
-+    logger.debug("Getting guidelines for language", { language, cacheKey });
-+
-    if (this.cache.has(cacheKey)) {
-      const cached = this.cache.get(cacheKey)!;
--      logger.debug('Returning cached guidelines', { language, count: cached.length });
-+      logger.debug("Returning cached guidelines", {
-+        language,
-+        count: cached.length,
-+      });
-      return cached;
-    }
-
--    logger.debug('Scanning all guidelines for language filtering');
-+    logger.debug("Scanning all guidelines for language filtering");
-    const allGuidelines = await this.scanAllGuidelines();
--
-+
-    // Filter guidelines relevant to the language
--    const relevantGuidelines = allGuidelines.filter(guideline => {
-+    const relevantGuidelines = allGuidelines.filter((guideline) => {
-      const category = guideline.category.toLowerCase();
-      const lang = language.toLowerCase();
--
-+
-      return (
--        category === lang ||
--        category === 'security' ||
--        category === 'performance' ||
--        (lang === 'ts' && category === 'typescript') ||
--        (lang === 'tsx' && category === 'typescript') ||
--        (lang === 'js' && category === 'javascript') ||
--        (lang === 'jsx' && category === 'javascript') ||
--        (lang === 'py' && category === 'python')
-+        category === lang ||
-+        category === "security" ||
-+        category === "performance" ||
-+        (lang === "ts" && category === "typescript") ||
-+        (lang === "tsx" && category === "typescript") ||
-+        (lang === "js" && category === "javascript") ||
-+        (lang === "jsx" && category === "javascript") ||
-+        (lang === "py" && category === "python")
-      );
-    });
-
--    logger.debug('Filtered guidelines for language', {
-+    logger.debug("Filtered guidelines for language", {
-      language,
-      totalGuidelines: allGuidelines.length,
-      relevantCount: relevantGuidelines.length,
--      relevantCategories: relevantGuidelines.map(g => g.category)
-+      relevantCategories: relevantGuidelines.map((g) => g.category),
-    });
-
-    this.cache.set(cacheKey, relevantGuidelines);
-@@ -75,71 +80,85 @@ export class GuidelinesScanner {
-  async scanAllGuidelines(): Promise<GuidelineContent[]> {
-    const guidelines: GuidelineContent[] = [];
-
--    logger.debug('Starting to scan all guidelines', { guidelinesDir: this.guidelinesDir });
-+    logger.debug("Starting to scan all guidelines", {
-+      guidelinesDir: this.guidelinesDir,
-+    });
-
-    try {
--      const categories = await readdir(this.guidelinesDir, { withFileTypes: true });
--      logger.debug('Found categories', {
--        categoriesCount: categories.length,
--        categories: categories.map(c => c.name)
-+      const categories = await readdir(this.guidelinesDir, {
-+        withFileTypes: true,
-+      });
-+      logger.debug("Found categories", {
-+        categoriesCount: categories.length,
-+        categories: categories.map((c) => c.name),
-      });
--
-+
-      for (const category of categories) {
-        if (category.isDirectory()) {
-          const categoryPath = join(this.guidelinesDir, category.name);
--          logger.debug('Scanning category directory', { category: category.name, categoryPath });
--
-+          logger.debug("Scanning category directory", {
-+            category: category.name,
-+            categoryPath,
-+          });
-+
-          const files = await readdir(categoryPath);
--          const markdownFiles = files.filter(f => extname(f) === '.md');
--
--          logger.debug('Found markdown files in category', {
--            category: category.name,
-+          const markdownFiles = files.filter((f) => extname(f) === ".md");
-+
-+          logger.debug("Found markdown files in category", {
-+            category: category.name,
-            totalFiles: files.length,
-            markdownFiles: markdownFiles.length,
--            files: markdownFiles
-+            files: markdownFiles,
-          });
--
-+
-          for (const filename of markdownFiles) {
-            const filePath = join(categoryPath, filename);
--            logger.debug('Reading guideline file', { category: category.name, filename, filePath });
--
-+            logger.debug("Reading guideline file", {
-+              category: category.name,
-+              filename,
-+              filePath,
-+            });
-+
-            try {
--              const content = await readFile(filePath, 'utf-8');
--
-+              const content = await readFile(filePath, "utf-8");
-+
-              guidelines.push({
-                category: category.name,
-                filename,
-                content,
--                language: this.extractLanguageFromCategory(category.name)
-+                language: this.extractLanguageFromCategory(category.name),
-              });
--
--              logger.debug('Successfully loaded guideline', {
--                category: category.name,
-+
-+              logger.debug("Successfully loaded guideline", {
-+                category: category.name,
-                filename,
--                contentLength: content.length
-+                contentLength: content.length,
-              });
-            } catch (fileError) {
--              logger.warn('Failed to read guideline file', {
-+              logger.warn("Failed to read guideline file", {
-                category: category.name,
-                filename,
-                filePath,
--                error: fileError instanceof Error ? fileError.message : 'Unknown error'
-+                error:
-+                  fileError instanceof Error
-+                    ? fileError.message
-+                    : "Unknown error",
-              });
-            }
-          }
-        }
-      }
-    } catch (error) {
--      logger.error('Failed to scan guidelines directory', {
-+      logger.error("Failed to scan guidelines directory", {
-        guidelinesDir: this.guidelinesDir,
--        error: error instanceof Error ? error.message : 'Unknown error'
-+        error: error instanceof Error ? error.message : "Unknown error",
-      });
-    }
-
--    logger.info('Completed scanning guidelines', {
-+    logger.info("Completed scanning guidelines", {
-      guidelinesDir: this.guidelinesDir,
-      totalGuidelines: guidelines.length,
--      categories: [...new Set(guidelines.map(g => g.category))]
-+      categories: [...new Set(guidelines.map((g) => g.category))],
-    });
-
-    return guidelines;
-@@ -150,7 +169,9 @@ export class GuidelinesScanner {
-   */
-  async getGuidelinesByCategory(category: string): Promise<GuidelineContent[]> {
-    const allGuidelines = await this.scanAllGuidelines();
--    return allGuidelines.filter(g => g.category.toLowerCase() === category.toLowerCase());
-+    return allGuidelines.filter(
-+      (g) => g.category.toLowerCase() === category.toLowerCase()
-+    );
-  }
-
-  /**
-@@ -158,11 +179,13 @@ export class GuidelinesScanner {
-   */
-  formatGuidelinesForPrompt(guidelines: GuidelineContent[]): string {
-    if (guidelines.length === 0) {
--      return '';
-+      return "";
-    }
-
--    const sections = guidelines.map(guideline => {
--      return `## ${guideline.category.toUpperCase()}: ${guideline.filename}\n\n${guideline.content}`;
-+    const sections = guidelines.map((guideline) => {
-+      return `## ${guideline.category.toUpperCase()}: ${
-+        guideline.filename
-+      }\n\n${guideline.content}`;
-    });
-
-    return `
-@@ -170,7 +193,7 @@ export class GuidelinesScanner {
-
-Use these guidelines to review the code:
-
--${sections.join('\n\n---\n\n')}
-+${sections.join("\n\n---\n\n")}
-
-Please follow these guidelines when reviewing code and flag any violations or improvements based on the examples above.
-`;
-@@ -188,9 +211,9 @@ Please follow these guidelines when reviewing code and flag any violations or im
-   */
-  private extractLanguageFromCategory(category: string): string | undefined {
-    const languageMap: Record<string, string> = {
--      'javascript': 'js',
--      'typescript': 'ts',
--      'python': 'py',
-+      javascript: "js",
-+      typescript: "ts",
-+      python: "py",
-    };
-
-    return languageMap[category.toLowerCase()];
-@@ -201,13 +224,15 @@ Please follow these guidelines when reviewing code and flag any violations or im
-   */
-  async getAvailableCategories(): Promise<string[]> {
-    try {
--      const entries = await readdir(this.guidelinesDir, { withFileTypes: true });
-+      const entries = await readdir(this.guidelinesDir, {
-+        withFileTypes: true,
-+      });
-      return entries
--        .filter(entry => entry.isDirectory())
--        .map(entry => entry.name);
-+        .filter((entry) => entry.isDirectory())
-+        .map((entry) => entry.name);
-    } catch (error) {
--      console.warn('Failed to get categories:', error);
-+      console.warn("Failed to get categories:", error);
-      return [];
-    }
-  }
--}
-\ No newline at end of file
-+}
-diff --git a/src/review-agent.ts b/src/review-agent.ts
-new file mode 100644
-index 0000000..58a798c
---- /dev/null
-+++ b/src/review-agent.ts
-@@ -0,0 +1,985 @@
-+// review-agent.ts - VoltAgent-based AI code review system
-+import { execSync } from "child_process";
-+import { openai } from "@ai-sdk/openai";
-+import { generateText } from "ai";
-+import { Agent, VoltAgent, createTool } from "@voltagent/core";
-+import { VercelAIProvider } from "@voltagent/vercel-ai";
-+import { createPinoLogger } from "@voltagent/logger";
-+import { z } from "zod";
-+import { GitHubService } from "./github-service";
-+import { GuidelinesScanner } from "./guidelines-scanner";
-+import { configuration } from "./configulation";
-+import * as fs from "fs";
-+import * as path from "path";
-+import { fileURLToPath } from "url";
-+
-+// === CONFIG ===
-+const __filename = fileURLToPath(import.meta.url);
-+const __dirname = path.dirname(__filename);
-+
-+const GUIDELINES_PATH = path.join(__dirname, "guidelines");
-+
-+// Initialize services
-+const reviewLogger = createPinoLogger({
-+  name: "review-agent",
-+  level: configuration.logging.level as any,
-+});
-+
-+const githubService = new GitHubService();
-+const guidelinesScanner = new GuidelinesScanner();
-+
-+// === TYPES ===
-+interface InlineComment {
-+  path: string;
-+  line: number;
-+  severity: string;
-+  type: string;
-+  quote: string;
-+  issue: string;
-+  recommendation: string;
-+}
-+
-+interface ReviewResult {
-+  summary: string;
-+  score: number;
-+  generalComments: string;
-+  inlineComments: InlineComment[];
-+}
-+
-+interface GitDiffResult {
-+  diff: string;
-+  linesChanged: number;
-+  hasChanges: boolean;
-+}
-+
-+interface AIReviewResponse {
-+  review: ReviewResult;
-+  cost: number;
-+  score: number;
-+}
-+
-+// === TOOL 1: Git Operations ===
-+const gitDiffTool = createTool({
-+  name: "get_git_diff",
-+  description: "Fetch git diff from main branch or between specific commits",
-+  parameters: z.object({
-+    baseBranch: z
-+      .string()
-+      .optional()
-+      .describe("Base branch to compare against (defaults to origin/main)"),
-+    targetBranch: z
-+      .string()
-+      .optional()
-+      .describe("Target branch to compare (defaults to current)"),
-+    fetchLatest: z
-+      .boolean()
-+      .optional()
-+      .describe("Whether to fetch latest changes first (defaults to true)"),
-+  }),
-+  execute: async (input): Promise<GitDiffResult> => {
-+    const {
-+      baseBranch = "origin/main",
-+      targetBranch = "",
-+      fetchLatest = true,
-+    } = input;
-+
-+    reviewLogger.info("Executing git_diff tool", {
-+      baseBranch,
-+      targetBranch,
-+      fetchLatest,
-+    });
-+
-+    try {
-+      let command = "";
-+
-+      if (fetchLatest) {
-+        reviewLogger.debug("Fetching latest changes from origin");
-+        command = `git fetch origin main && `;
-+      }
-+
-+      const diffCommand = targetBranch
-+        ? `git diff ${baseBranch}...${targetBranch}`
-+        : `git diff ${baseBranch}`;
-+
-+      command += diffCommand;
-+
-+      reviewLogger.debug("Executing git command", { command });
-+
-+      const diff = execSync(command, { encoding: "utf8" });
-+      const linesChanged = diff.split("\n").length;
-+      const hasChanges = diff.trim().length > 0;
-+
-+      const result: GitDiffResult = {
-+        diff,
-+        linesChanged,
-+        hasChanges,
-+      };
-+
-+      reviewLogger.info("Git diff completed successfully", {
-+        baseBranch,
-+        targetBranch,
-+        hasChanges,
-+        linesChanged,
-+        diffLength: diff.length,
-+      });
-+
-+      return result;
-+    } catch (error) {
-+      reviewLogger.error("Failed to execute git diff", {
-+        baseBranch,
-+        targetBranch,
-+        error: error instanceof Error ? error.message : "Unknown error",
-+      });
-+
-+      throw new Error(
-+        `Failed to get git diff: ${
-+          error instanceof Error ? error.message : "Unknown error"
-+        }`
-+      );
-+    }
-+  },
-+});
-+
-+const commitAnalysisTool = createTool({
-+  name: "analyze_commits",
-+  description: "Analyze commit history and extract metadata for review context",
-+  parameters: z.object({
-+    baseBranch: z
-+      .string()
-+      .optional()
-+      .describe("Base branch to compare against (defaults to origin/main)"),
-+    maxCommits: z
-+      .number()
-+      .optional()
-+      .describe("Maximum number of commits to analyze (defaults to 10)"),
-+  }),
-+  execute: async (input) => {
-+    const { baseBranch = "origin/main", maxCommits = 10 } = input;
-+
-+    reviewLogger.info("Executing analyze_commits tool", {
-+      baseBranch,
-+      maxCommits,
-+    });
-+
-+    try {
-+      const command = `git log ${baseBranch}..HEAD --oneline --no-merges -n ${maxCommits}`;
-+
-+      reviewLogger.debug("Executing git log command", { command });
-+
-+      const output = execSync(command, { encoding: "utf8" });
-+      const commits = output
-+        .trim()
-+        .split("\n")
-+        .filter((line) => line.length > 0)
-+        .map((line) => {
-+          const [hash, ...messageParts] = line.split(" ");
-+          return {
-+            hash,
-+            message: messageParts.join(" "),
-+          };
-+        });
-+
-+      // Get detailed info for each commit
-+      const detailedCommits = await Promise.all(
-+        commits.map(async (commit) => {
-+          try {
-+            const detailCommand = `git show --stat ${commit.hash} --format="%an|%ae|%ad|%s"`;
-+            const details = execSync(detailCommand, { encoding: "utf8" });
-+            const lines = details.split("\n");
-+            const [author, email, date, subject] = lines[0].split("|");
-+
-+            const fileChanges = lines
-+              .slice(1)
-+              .filter(
-+                (line) =>
-+                  line.includes("|") &&
-+                  (line.includes("+") || line.includes("-"))
-+              )
-+              .map((line) => {
-+                const parts = line.trim().split("|");
-+                return {
-+                  file: parts[0].trim(),
-+                  changes: parts[1].trim(),
-+                };
-+              });
-+
-+            return {
-+              ...commit,
-+              author: author?.trim(),
-+              email: email?.trim(),
-+              date: date?.trim(),
-+              subject: subject?.trim(),
-+              fileChanges,
-+            };
-+          } catch (error) {
-+            reviewLogger.warn("Failed to get commit details", {
-+              hash: commit.hash,
-+              error: error instanceof Error ? error.message : "Unknown error",
-+            });
-+            return commit;
-+          }
-+        })
-+      );
-+
-+      const result = {
-+        baseBranch,
-+        commitsCount: commits.length,
-+        commits: detailedCommits,
-+        summary: {
-+          totalCommits: commits.length,
-+          authors: [
-+            ...new Set(detailedCommits.map((c) => c.author).filter(Boolean)),
-+          ],
-+          hasBreakingChanges: detailedCommits.some(
-+            (c) =>
-+              c.message.toLowerCase().includes("breaking") ||
-+              c.message.toLowerCase().includes("major")
-+          ),
-+        },
-+      };
-+
-+      reviewLogger.info("Commit analysis completed successfully", {
-+        baseBranch,
-+        commitsCount: commits.length,
-+        authorsCount: result.summary.authors.length,
-+        hasBreakingChanges: result.summary.hasBreakingChanges,
-+      });
-+
-+      return result;
-+    } catch (error) {
-+      reviewLogger.error("Failed to analyze commits", {
-+        baseBranch,
-+        maxCommits,
-+        error: error instanceof Error ? error.message : "Unknown error",
-+      });
-+
-+      throw new Error(
-+        `Failed to analyze commits: ${
-+          error instanceof Error ? error.message : "Unknown error"
-+        }`
-+      );
-+    }
-+  },
-+});
-+
-+// === TOOL 2: Guidelines Integration ===
-+const loadGuidelinesTool = createTool({
-+  name: "load_guidelines",
-+  description:
-+    "Load coding guidelines from scanner or fallback files for AI review",
-+  parameters: z.object({
-+    language: z
-+      .string()
-+      .optional()
-+      .describe("Specific programming language to load guidelines for"),
-+    category: z
-+      .string()
-+      .optional()
-+      .describe("Specific guideline category (security, performance, etc.)"),
-+    includeFallback: z
-+      .boolean()
-+      .optional()
-+      .describe("Whether to include fallback guidelines if scanner fails"),
-+  }),
-+  execute: async (input) => {
-+    const { language, category, includeFallback = true } = input;
-+
-+    reviewLogger.info("Executing load_guidelines tool", {
-+      language,
-+      category,
-+      includeFallback,
-+    });
-+
-+    try {
-+      let guidelines = "";
-+      let guidelinesCount = 0;
-+      let source = "unknown";
-+
-+      try {
-+        // Try to use GuidelinesScanner first
-+        if (language) {
-+          const languageGuidelines =
-+            await guidelinesScanner.getGuidelinesForLanguage(language);
-+          guidelines =
-+            guidelinesScanner.formatGuidelinesForPrompt(languageGuidelines);
-+          guidelinesCount = languageGuidelines.length;
-+          source = "scanner-language";
-+        } else if (category) {
-+          const categoryGuidelines =
-+            await guidelinesScanner.getGuidelinesByCategory(category);
-+          guidelines =
-+            guidelinesScanner.formatGuidelinesForPrompt(categoryGuidelines);
-+          guidelinesCount = categoryGuidelines.length;
-+          source = "scanner-category";
-+        } else {
-+          const allGuidelines = await guidelinesScanner.scanAllGuidelines();
-+          guidelines =
-+            guidelinesScanner.formatGuidelinesForPrompt(allGuidelines);
-+          guidelinesCount = allGuidelines.length;
-+          source = "scanner-all";
-+        }
-+      } catch (scannerError) {
-+        reviewLogger.warn(
-+          "Failed to load guidelines from scanner, trying fallback",
-+          {
-+            scannerError:
-+              scannerError instanceof Error
-+                ? scannerError.message
-+                : "Unknown error",
-+          }
-+        );
-+
-+        if (includeFallback) {
-+          // Fallback to reading guidelines file
-+          if (fs.existsSync(GUIDELINES_PATH)) {
-+            guidelines = fs.readFileSync(GUIDELINES_PATH, "utf8");
-+            guidelinesCount = 1;
-+            source = "file-fallback";
-+          } else {
-+            guidelines = `# Default Guidelines
-+
-+- Follow clean code principles
-+- Use meaningful variable names
-+- Add proper error handling
-+- Include unit tests for new features
-+- Implement proper logging
-+- Follow security best practices
-+- Optimize for performance where needed
-+- Use consistent code formatting
-+- Add comprehensive documentation
-+- Handle edge cases appropriately`;
-+            guidelinesCount = 1;
-+            source = "default-fallback";
-+          }
-+        } else {
-+          throw scannerError;
-+        }
-+      }
-+
-+      const result = {
-+        guidelines,
-+        guidelinesCount,
-+        source,
-+        language: language || "all",
-+        category: category || "all",
-+        length: guidelines.length,
-+      };
-+
-+      reviewLogger.info("Guidelines loaded successfully", {
-+        source,
-+        guidelinesCount,
-+        language: language || "all",
-+        category: category || "all",
-+        guidelinesLength: guidelines.length,
-+      });
-+
-+      return result;
-+    } catch (error) {
-+      reviewLogger.error("Failed to load guidelines", {
-+        language,
-+        category,
-+        includeFallback,
-+        error: error instanceof Error ? error.message : "Unknown error",
-+      });
-+
-+      throw new Error(
-+        `Failed to load guidelines: ${
-+          error instanceof Error ? error.message : "Unknown error"
-+        }`
-+      );
-+    }
-+  },
-+});
-+
-+// === TOOL 3: AI Code Review ===
-+const aiCodeReviewTool = createTool({
-+  name: "ai_code_review",
-+  description:
-+    "Perform comprehensive AI-powered code review using OpenAI GPT with guidelines",
-+  parameters: z.object({
-+    diff: z.string().describe("Git diff content to review"),
-+    guidelines: z.string().describe("Coding guidelines to apply during review"),
-+    model: z
-+      .string()
-+      .optional()
-+      .describe("OpenAI model to use (defaults to gpt-4o-mini)"),
-+    temperature: z
-+      .number()
-+      .optional()
-+      .describe("Temperature for AI generation (defaults to 0.1)"),
-+    focusAreas: z
-+      .array(z.string())
-+      .optional()
-+      .describe("Specific areas to focus on (security, performance, etc.)"),
-+  }),
-+  execute: async (input): Promise<AIReviewResponse> => {
-+    const {
-+      diff,
-+      guidelines,
-+      model = "gpt-4o-mini",
-+      temperature = 0.1,
-+      focusAreas = [],
-+    } = input;
-+
-+    reviewLogger.info("Executing ai_code_review tool", {
-+      diffLength: diff.length,
-+      guidelinesLength: guidelines.length,
-+      model,
-+      temperature,
-+      focusAreas,
-+    });
-+
-+    try {
-+      const focusSection =
-+        focusAreas.length > 0
-+          ? `\n\n## Specific Focus Areas:\n${focusAreas
-+              .map((area) => `- ${area}`)
-+              .join("\n")}`
-+          : "";
-+
-+      const prompt = `You are a senior code reviewer with expertise in software engineering best practices.
-+Review the following git diff against these coding guidelines.
-+
-+## Guidelines:
-+
-+--------------------
-+
-+${guidelines}
-+
-+--------------------
-+
-+## Code Diff:
-+
-+--------------------
-+
-+${diff}
-+
-+--------------------
-+
-+## For each issue you find, quote the specific problematic line(s) and provide actionable feedback.
-+${focusSection}
-+
-+## Please provide your review in this exact JSON format:
-+{
-+  "summary": "Brief overview of the changes",
-+  "score": 85,
-+  "generalComments": "Overall feedback about the changes",
-+  "inlineComments": [
-+    {
-+      "path": "src/example.ts",
-+      "line": 42,
-+      "severity": "high|medium|low",
-+      "type": "bug|security|performance|style|maintainability",
-+      "quote": "const password = 'hardcoded123';",
-+      "issue": "Hardcoded password found",
-+      "recommendation": "Use environment variables or secure configuration"
-+    }
-+  ]
-+}
-+
-+## Focus on:
-+- Quote the exact problematic code lines
-+- Provide specific, actionable recommendations
-+- Identify security vulnerabilities, bugs, and code quality issues
-+- Suggest concrete improvements
-+- Reference applicable guidelines
-+
-+**SCORE: [0-100]** (numerical score only)`;
-+
-+      const startTime = Date.now();
-+
-+      const result = await generateText({
-+        model: openai(model),
-+        prompt,
-+        temperature,
-+      });
-+
-+      const endTime = Date.now();
-+
-+      // Calculate approximate cost
-+      const inputTokens = Math.ceil(prompt.length / 4); // Rough estimate: 4 chars per token
-+      const outputTokens = Math.ceil((result.text?.length || 0) / 4);
-+
-+      let inputCost = 0;
-+      let outputCost = 0;
-+
-+      // Cost calculation based on model
-+      if (model === "gpt-4o-mini") {
-+        inputCost = (inputTokens / 1000000) * 0.15;
-+        outputCost = (outputTokens / 1000000) * 0.6;
-+      } else if (model === "gpt-4o") {
-+        inputCost = (inputTokens / 1000000) * 2.5;
-+        outputCost = (outputTokens / 1000000) * 10;
-+      }
-+
-+      const totalCost = inputCost + outputCost;
-+
-+      // Parse JSON response
-+      let reviewResult: ReviewResult;
-+      try {
-+        // Try to extract JSON from the response
-+        const jsonMatch = result.text?.match(/\{[\s\S]*\}/);
-+        if (jsonMatch) {
-+          reviewResult = JSON.parse(jsonMatch[0]);
-+        } else {
-+          throw new Error("No JSON found in response");
-+        }
-+      } catch (parseError) {
-+        reviewLogger.warn(
-+          "Failed to parse JSON response, using fallback format",
-+          {
-+            parseError:
-+              parseError instanceof Error
-+                ? parseError.message
-+                : "Unknown error",
-+          }
-+        );
-+
-+        // Fallback to original format
-+        const scoreMatch = result.text?.match(/\*\*SCORE:\s*(\d+)\*\*/);
-+        const score = scoreMatch ? parseInt(scoreMatch[1]) : 75;
-+
-+        reviewResult = {
-+          summary: "Code review completed",
-+          score,
-+          generalComments: result.text || "No review generated.",
-+          inlineComments: [],
-+        };
-+      }
-+
-+      const score = reviewResult.score;
-+
-+      const response: AIReviewResponse = {
-+        review: reviewResult,
-+        cost: totalCost,
-+        score,
-+      };
-+
-+      reviewLogger.info("AI code review completed successfully", {
-+        responseLength: result.text?.length || 0,
-+        inputTokens,
-+        outputTokens,
-+        costUSD: totalCost.toFixed(6),
-+        score,
-+        inlineCommentsCount: reviewResult.inlineComments.length,
-+        processingTimeMs: endTime - startTime,
-+        model,
-+      });
-+
-+      return response;
-+    } catch (error) {
-+      reviewLogger.error("Failed to generate AI code review", {
-+        diffLength: diff.length,
-+        guidelinesLength: guidelines.length,
-+        model,
-+        error: error instanceof Error ? error.message : "Unknown error",
-+      });
-+
-+      throw new Error(
-+        `AI review failed: ${
-+          error instanceof Error ? error.message : "Unknown error"
-+        }`
-+      );
-+    }
-+  },
-+});
-+
-+// === TOOL 4: Pull Request Posting ===
-+const postGitHubReviewTool = createTool({
-+  name: "post_github_review",
-+  description: "Post comprehensive review results to GitHub pull request",
-+  parameters: z.object({
-+    owner: z.string().describe("GitHub repository owner"),
-+    repo: z.string().describe("GitHub repository name"),
-+    pullNumber: z.number().describe("Pull request number"),
-+    review: z
-+      .object({
-+        summary: z.string(),
-+        score: z.number(),
-+        generalComments: z.string(),
-+        inlineComments: z.array(
-+          z.object({
-+            path: z.string(),
-+            line: z.number(),
-+            severity: z.string(),
-+            type: z.string(),
-+            quote: z.string(),
-+            issue: z.string(),
-+            recommendation: z.string(),
-+          })
-+        ),
-+      })
-+      .describe("Review results to post"),
-+    cost: z.number().describe("AI generation cost in USD"),
-+    model: z.string().optional().describe("AI model used for review"),
-+  }),
-+  execute: async (input) => {
-+    const {
-+      owner,
-+      repo,
-+      pullNumber,
-+      review,
-+      cost,
-+      model = "gpt-4o-mini",
-+    } = input;
-+
-+    reviewLogger.info("Executing post_github_review tool", {
-+      owner,
-+      repo,
-+      pullNumber,
-+      score: review.score,
-+      inlineCommentsCount: review.inlineComments.length,
-+      cost,
-+      model,
-+    });
-+
-+    try {
-+      // Format the general review comment
-+      const generalReview = `## 🤖 AI Code Review
-+
-+**Summary:** ${review.summary}
-+
-+**General Comments:**
-+${review.generalComments}
-+
-+---
-+
-+**📊 Review Analytics:**
-+- **Quality Score:** ${review.score}/100
-+- **Issues Found:** ${review.inlineComments.length}
-+- **AI Cost:** $${cost.toFixed(6)} USD
-+- **Model:** ${model}
-+- **Generated:** ${new Date().toISOString()}
-+
-+${
-+  review.inlineComments.length > 0
-+    ? `\n**📍 Inline Comments:** ${review.inlineComments.length} specific issues posted as inline comments`
-+    : ""
-+}`;
-+
-+      // Post general review comment
-+      await githubService.postPullRequestComment(
-+        owner,
-+        repo,
-+        pullNumber,
-+        generalReview
-+      );
-+
-+      reviewLogger.info("Posted general review comment to GitHub", {
-+        owner,
-+        repo,
-+        pullNumber,
-+      });
-+
-+      // Post inline comments if any
-+      let inlineCommentsPosted = 0;
-+      if (review.inlineComments.length > 0) {
-+        const inlineComments = review.inlineComments.map((comment) => ({
-+          path: comment.path,
-+          line: comment.line,
-+          body: `**${comment.severity.toUpperCase()} - ${comment.type.toUpperCase()}**
-+
-+> \`${comment.quote}\`
-+
-+**Issue:** ${comment.issue}
-+
-+**Recommendation:** ${comment.recommendation}`,
-+        }));
-+
-+        await githubService.postInlineReviewComments(
-+          owner,
-+          repo,
-+          pullNumber,
-+          inlineComments
-+        );
-+
-+        inlineCommentsPosted = inlineComments.length;
-+
-+        reviewLogger.info("Posted inline comments to GitHub", {
-+          owner,
-+          repo,
-+          pullNumber,
-+          inlineCommentsCount: inlineCommentsPosted,
-+        });
-+      }
-+
-+      const result = {
-+        owner,
-+        repo,
-+        pullNumber,
-+        generalCommentPosted: true,
-+        inlineCommentsPosted,
-+        totalComments: inlineCommentsPosted + 1,
-+        reviewUrl: `https://github.com/${owner}/${repo}/pull/${pullNumber}`,
-+      };
-+
-+      reviewLogger.info("GitHub review posting completed successfully", result);
-+
-+      return result;
-+    } catch (error) {
-+      reviewLogger.error("Failed to post review to GitHub", {
-+        owner,
-+        repo,
-+        pullNumber,
-+        error: error instanceof Error ? error.message : "Unknown error",
-+      });
-+
-+      throw new Error(
-+        `Failed to post GitHub review: ${
-+          error instanceof Error ? error.message : "Unknown error"
-+        }`
-+      );
-+    }
-+  },
-+});
-+
-+// === TOOL 5: Review Orchestration ===
-+const comprehensiveReviewTool = createTool({
-+  name: "comprehensive_review",
-+  description:
-+    "Orchestrate complete code review workflow from git diff to posting results",
-+  parameters: z.object({
-+    repoOwner: z.string().describe("Repository owner (for GitHub posting)"),
-+    repoName: z.string().describe("Repository name (for GitHub posting)"),
-+    pullNumber: z.number().describe("Pull request number (for GitHub posting)"),
-+    baseBranch: z
-+      .string()
-+      .optional()
-+      .describe("Base branch to compare against (defaults to origin/main)"),
-+    language: z
-+      .string()
-+      .optional()
-+      .describe("Primary programming language for guidelines"),
-+    focusAreas: z
-+      .array(z.string())
-+      .optional()
-+      .describe("Specific review focus areas"),
-+    aiModel: z
-+      .string()
-+      .optional()
-+      .describe("AI model to use (defaults to gpt-4o-mini)"),
-+    postToGitHub: z
-+      .boolean()
-+      .optional()
-+      .describe("Whether to post results to GitHub (defaults to true)"),
-+  }),
-+  execute: async (input) => {
-+    const {
-+      repoOwner,
-+      repoName,
-+      pullNumber,
-+      baseBranch = "origin/main",
-+      language,
-+      focusAreas = [],
-+      aiModel = "gpt-4o-mini",
-+      postToGitHub = true,
-+    } = input;
-+
-+    reviewLogger.info("Executing comprehensive_review orchestration", {
-+      repoOwner,
-+      repoName,
-+      pullNumber,
-+      baseBranch,
-+      language,
-+      focusAreas,
-+      aiModel,
-+      postToGitHub,
-+    });
-+
-+    try {
-+      const startTime = Date.now();
-+
-+      // Step 1: Get git diff
-+      reviewLogger.info("Step 1: Fetching git diff");
-+      const diffResult = await gitDiffTool.execute({
-+        baseBranch,
-+        fetchLatest: true,
-+      });
-+
-+      if (!diffResult.hasChanges) {
-+        reviewLogger.info("No changes found, skipping review");
-+        return {
-+          success: true,
-+          message: "No changes found to review",
-+          hasChanges: false,
-+        };
-+      }
-+
-+      reviewLogger.info("Changes detected, proceeding with review", {
-+        linesChanged: diffResult.linesChanged,
-+        diffLength: diffResult.diff.length,
-+      });
-+
-+      // Step 2: Analyze commits (optional)
-+      reviewLogger.info("Step 2: Analyzing commit history");
-+      const commitAnalysis = await commitAnalysisTool.execute({ baseBranch });
-+
-+      // Step 3: Load guidelines
-+      reviewLogger.info("Step 3: Loading coding guidelines");
-+      const guidelinesResult = await loadGuidelinesTool.execute({
-+        language,
-+        includeFallback: true,
-+      });
-+
-+      // Step 4: Perform AI review
-+      reviewLogger.info("Step 4: Performing AI code review");
-+      const aiReviewResult = await aiCodeReviewTool.execute({
-+        diff: diffResult.diff,
-+        guidelines: guidelinesResult.guidelines,
-+        model: aiModel,
-+        focusAreas,
-+      });
-+
-+      reviewLogger.info("AI review completed", {
-+        qualityScore: aiReviewResult.score,
-+        aiCostUSD: aiReviewResult.cost.toFixed(6),
-+        inlineCommentsCount: aiReviewResult.review.inlineComments.length,
-+      });
-+
-+      // Step 5: Post to GitHub (if enabled)
-+      let githubResult = null;
-+      if (postToGitHub) {
-+        reviewLogger.info("Step 5: Posting review to GitHub");
-+        githubResult = await postGitHubReviewTool.execute({
-+          owner: repoOwner,
-+          repo: repoName,
-+          pullNumber,
-+          review: aiReviewResult.review,
-+          cost: aiReviewResult.cost,
-+          model: aiModel,
-+        });
-+
-+        reviewLogger.info("Review posted to GitHub successfully", {
-+          reviewUrl: githubResult.reviewUrl,
-+          totalComments: githubResult.totalComments,
-+        });
-+      }
-+
-+      const endTime = Date.now();
-+
-+      const result = {
-+        success: true,
-+        hasChanges: true,
-+        processingTimeMs: endTime - startTime,
-+        git: {
-+          baseBranch,
-+          linesChanged: diffResult.linesChanged,
-+          diffLength: diffResult.diff.length,
-+        },
-+        commits: {
-+          count: commitAnalysis.commitsCount,
-+          authors: commitAnalysis.summary.authors,
-+          hasBreakingChanges: commitAnalysis.summary.hasBreakingChanges,
-+        },
-+        guidelines: {
-+          source: guidelinesResult.source,
-+          count: guidelinesResult.guidelinesCount,
-+          language: guidelinesResult.language,
-+        },
-+        aiReview: {
-+          model: aiModel,
-+          score: aiReviewResult.score,
-+          cost: aiReviewResult.cost,
-+          summary: aiReviewResult.review.summary,
-+          issuesFound: aiReviewResult.review.inlineComments.length,
-+          focusAreas,
-+        },
-+        github: githubResult,
-+      };
-+
-+      reviewLogger.info("Comprehensive review completed successfully", {
-+        processingTimeMs: result.processingTimeMs,
-+        qualityScore: result.aiReview.score,
-+        issuesFound: result.aiReview.issuesFound,
-+        posted: postToGitHub,
-+      });
-+
-+      return result;
-+    } catch (error) {
-+      reviewLogger.error("Comprehensive review failed", {
-+        repoOwner,
-+        repoName,
-+        pullNumber,
-+        error: error instanceof Error ? error.message : "Unknown error",
-+      });
-+
-+      throw new Error(
-+        `Comprehensive review failed: ${
-+          error instanceof Error ? error.message : "Unknown error"
-+        }`
-+      );
-+    }
-+  },
-+});
-+
-+// === VOLT AGENT SETUP ===
-+const logger = createPinoLogger({
-+  name: "review-agent-system",
-+  level: configuration.logging.level as any,
-+});
-+
-+reviewLogger.info("Initializing Review Agent VoltAgent system", {
-+  agentName: "comprehensive-code-reviewer",
-+  toolsCount: 6,
-+  tools: [
-+    "get_git_diff",
-+    "analyze_commits",
-+    "load_guidelines",
-+    "ai_code_review",
-+    "post_github_review",
-+    "comprehensive_review",
-+  ],
-+});
-+
-+new VoltAgent({
-+  agents: {
-+    "review-agent": new Agent({
-+      name: "comprehensive-code-reviewer",
-+      description: `A comprehensive AI-powered code review agent that:
-+
-+    1. **Git Operations**: Fetches diffs, analyzes commits, and extracts change metadata
-+    2. **Guidelines Integration**: Loads and applies coding guidelines from multiple sources
-+    3. **AI Review**: Performs intelligent code analysis using OpenAI GPT models
-+    4. **PR Integration**: Posts detailed reviews to GitHub pull requests
-+    5. **Orchestration**: Coordinates the complete review workflow
-+
-+    The agent can handle individual tool operations or run comprehensive reviews that combine all capabilities.
-+
-+    Key Features:
-+    - Multi-branch git diff analysis with commit history context
-+    - Dynamic guideline loading with fallback mechanisms
-+    - Configurable AI models and focus areas
-+    - Structured inline comments with severity classification
-+    - Cost tracking and performance metrics
-+    - GitHub integration with rich formatting
-+
-+    Use 'comprehensive_review' for full workflow or individual tools for specific operations.`,
-+      llm: new VercelAIProvider(),
-+      model: openai("gpt-4o"),
-+      tools: [
-+        gitDiffTool,
-+        commitAnalysisTool,
-+        loadGuidelinesTool,
-+        aiCodeReviewTool,
-+        postGitHubReviewTool,
-+        comprehensiveReviewTool,
-+      ],
-+    }),
-+  },
-+  logger,
-+});
-+
-+reviewLogger.info("Review Agent VoltAgent system started successfully");
-+
-+export {
-+  gitDiffTool,
-+  commitAnalysisTool,
-+  loadGuidelinesTool,
-+  aiCodeReviewTool,
-+  postGitHubReviewTool,
-+  comprehensiveReviewTool,
-+  type ReviewResult,
-+  type InlineComment,
-+  type AIReviewResponse,
-+  type GitDiffResult,
-+};
-diff --git a/src/review.ts b/src/review.ts
-new file mode 100644
-index 0000000..a89a59f
---- /dev/null
-+++ b/src/review.ts
-@@ -0,0 +1,353 @@
-+// review.ts - AI-powered code review service
-+import { execSync } from "child_process";
-+import { openai } from "@ai-sdk/openai";
-+import { generateText } from "ai";
-+import { GitHubService } from "./github-service";
-+import { GuidelinesScanner } from "./guidelines-scanner";
-+import { createPinoLogger } from "@voltagent/logger";
-+import { configuration } from "./configulation";
-+import * as fs from "fs";
-+import * as path from "path";
-+import { fileURLToPath } from "url";
-+
-+// === CONFIG ===
-+const __filename = fileURLToPath(import.meta.url);
-+const __dirname = path.dirname(__filename);
-+
-+const GITHUB_REPO = process.env.GITHUB_REPO!;
-+const PR_NUMBER = process.env.PR_NUMBER!;
-+const GUIDELINES_PATH = path.join(__dirname, "guidelines");
-+
-+// Initialize services
-+const logger = createPinoLogger({
-+  name: "code-review-service",
-+  level: configuration.logging.level as any,
-+});
-+
-+const githubService = new GitHubService();
-+const guidelinesScanner = new GuidelinesScanner();
-+
-+// === 1. Get diff from git ===
-+function getDiff(): string {
-+  logger.info("Fetching git diff from main branch");
-+  return execSync("git fetch origin main && git diff origin/main", {
-+    encoding: "utf8",
-+  });
-+}
-+
-+// === 2. Load guidelines ===
-+async function getGuidelines(): Promise<string> {
-+  logger.info("Loading coding guidelines");
-+  try {
-+    // Try to use GuidelinesScanner if available
-+    const allGuidelines = await guidelinesScanner.scanAllGuidelines();
-+    return guidelinesScanner.formatGuidelinesForPrompt(allGuidelines);
-+  } catch (error) {
-+    logger.warn(
-+      "Failed to load guidelines from scanner, falling back to file",
-+      {
-+        error: error instanceof Error ? error.message : "Unknown error",
-+      }
-+    );
-+
-+    // Fallback to reading guidelines file
-+    if (fs.existsSync(GUIDELINES_PATH)) {
-+      return fs.readFileSync(GUIDELINES_PATH, "utf8");
-+    }
-+
-+    return "# Default Guidelines\n\n- Follow clean code principles\n- Use meaningful variable names\n- Add proper error handling\n- Include unit tests for new features";
-+  }
-+}
-+
-+// === 3. Ask AI to review code ===
-+interface InlineComment {
-+  path: string;
-+  line: number;
-+  severity: string;
-+  type: string;
-+  quote: string;
-+  issue: string;
-+  recommendation: string;
-+}
-+
-+interface ReviewResult {
-+  summary: string;
-+  score: number;
-+  generalComments: string;
-+  inlineComments: InlineComment[];
-+}
-+
-+async function reviewCode(
-+  diff: string,
-+  guidelines: string
-+): Promise<{ review: ReviewResult; cost: number; score: number }> {
-+  logger.info("Starting AI code review", {
-+    diffLength: diff.length,
-+    guidelinesLength: guidelines.length,
-+  });
-+
-+  const prompt = `You are a senior code reviewer with expertise in software engineering best practices.
-+Review the following git diff against these coding guidelines.
-+
-+## Guidelines:
-+
-+--------------------
-+
-+${guidelines}
-+
-+--------------------
-+
-+## Code Diff:
-+
-+--------------------
-+
-+${diff}
-+
-+--------------------
-+
-+## For each issue you find, quote the specific problematic line(s) and provide actionable feedback.
-+
-+## Please provide your review in this exact JSON format:
-+{
-+  "summary": "Brief overview of the changes",
-+  "score": 85,
-+  "generalComments": "Overall feedback about the changes",
-+  "inlineComments": [
-+    {
-+      "path": "src/example.ts",
-+      "line": 42,
-+      "severity": "high|medium|low",
-+      "type": "bug|security|performance|style|maintainability",
-+      "quote": "const password = 'hardcoded123';",
-+      "issue": "Hardcoded password found",
-+      "recommendation": "Use environment variables or secure configuration"
-+    }
-+  ]
-+}
-+
-+## Focus on:
-+- Quote the exact problematic code lines
-+- Provide specific, actionable recommendations
-+- Identify security vulnerabilities, bugs, and code quality issues
-+- Suggest concrete improvements
-+
-+**SCORE: [0-100]** (numerical score only)`;
-+
-+  try {
-+    const startTime = Date.now();
-+
-+    const result = await generateText({
-+      model: openai("gpt-4o-mini"),
-+      prompt,
-+      temperature: 0.1,
-+    });
-+
-+    const endTime = Date.now();
-+
-+    // Calculate approximate cost for GPT-4o-mini
-+    // Input: $0.150 per 1M tokens, Output: $0.600 per 1M tokens
-+    const inputTokens = Math.ceil(prompt.length / 4); // Rough estimate: 4 chars per token
-+    const outputTokens = Math.ceil((result.text?.length || 0) / 4);
-+    const inputCost = (inputTokens / 1000000) * 0.15;
-+    const outputCost = (outputTokens / 1000000) * 0.6;
-+    const totalCost = inputCost + outputCost;
-+
-+    // Parse JSON response
-+    let reviewResult: ReviewResult;
-+    try {
-+      // Try to extract JSON from the response
-+      const jsonMatch = result.text?.match(/\{[\s\S]*\}/);
-+      if (jsonMatch) {
-+        reviewResult = JSON.parse(jsonMatch[0]);
-+      } else {
-+        throw new Error("No JSON found in response");
-+      }
-+    } catch (parseError) {
-+      logger.warn("Failed to parse JSON response, using fallback format", {
-+        parseError:
-+          parseError instanceof Error ? parseError.message : "Unknown error",
-+      });
-+
-+      // Fallback to original format
-+      const scoreMatch = result.text?.match(/\*\*SCORE:\s*(\d+)\*\*/);
-+      const score = scoreMatch ? parseInt(scoreMatch[1]) : 75;
-+
-+      reviewResult = {
-+        summary: "Code review completed",
-+        score,
-+        generalComments: result.text || "No review generated.",
-+        inlineComments: [],
-+      };
-+    }
-+
-+    const score = reviewResult.score;
-+
-+    logger.info("AI code review completed successfully", {
-+      responseLength: result.text?.length || 0,
-+      inputTokens,
-+      outputTokens,
-+      costUSD: totalCost.toFixed(6),
-+      score,
-+      inlineCommentsCount: reviewResult.inlineComments.length,
-+      processingTimeMs: endTime - startTime,
-+    });
-+
-+    return {
-+      review: reviewResult,
-+      cost: totalCost,
-+      score,
-+    };
-+  } catch (error) {
-+    logger.error("Failed to generate AI code review", {
-+      error: error instanceof Error ? error.message : "Unknown error",
-+    });
-+    throw new Error(
-+      `AI review failed: ${
-+        error instanceof Error ? error.message : "Unknown error"
-+      }`
-+    );
-+  }
-+}
-+
-+// === 4. Post review to GitHub/GitLab ===
-+async function postReviewToGithub(
-+  review: ReviewResult,
-+  cost: number,
-+  score: number
-+) {
-+  logger.info("Posting review to GitHub PR", { prNumber: PR_NUMBER });
-+
-+  try {
-+    const [owner, repo] = GITHUB_REPO.split("/");
-+
-+    // Format the general review comment
-+    const generalReview = `## 🤖 AI Code Review
-+
-+**Summary:** ${review.summary}
-+
-+**General Comments:**
-+${review.generalComments}
-+
-+---
-+
-+**📊 Review Analytics:**
-+- **Quality Score:** ${score}/100
-+- **Issues Found:** ${review.inlineComments.length}
-+- **AI Cost:** $${cost.toFixed(6)} USD
-+- **Model:** GPT-4o-mini
-+- **Generated:** ${new Date().toISOString()}
-+
-+${
-+  review.inlineComments.length > 0
-+    ? `\n**📍 Inline Comments:** ${review.inlineComments.length} specific issues posted as inline comments`
-+    : ""
-+}`;
-+
-+    // Post general review comment
-+    await githubService.postPullRequestComment(
-+      owner,
-+      repo,
-+      parseInt(PR_NUMBER),
-+      generalReview
-+    );
-+
-+    // Post inline comments if any
-+    if (review.inlineComments.length > 0) {
-+      const inlineComments = review.inlineComments.map((comment) => ({
-+        path: comment.path,
-+        line: comment.line,
-+        body: `**${comment.severity.toUpperCase()} - ${comment.type.toUpperCase()}**
-+
-+> \`${comment.quote}\`
-+
-+**Issue:** ${comment.issue}
-+
-+**Recommendation:** ${comment.recommendation}`,
-+      }));
-+
-+      await githubService.postInlineReviewComments(
-+        owner,
-+        repo,
-+        parseInt(PR_NUMBER),
-+        inlineComments
-+      );
-+
-+      logger.info(
-+        `✅ Posted ${review.inlineComments.length} inline comments to GitHub PR #${PR_NUMBER}`
-+      );
-+    }
-+
-+    logger.info(`✅ Review posted to GitHub PR #${PR_NUMBER}`);
-+  } catch (error) {
-+    logger.error("Failed to post review to GitHub", {
-+      prNumber: PR_NUMBER,
-+      error: error instanceof Error ? error.message : "Unknown error",
-+    });
-+    throw error;
-+  }
-+}
-+
-+// === 5. Main ===
-+(async () => {
-+  logger.info("Starting code review process");
-+
-+  try {
-+    const diff = getDiff();
-+    if (!diff.trim()) {
-+      logger.info("No changes found. Skipping review.");
-+      process.exit(0);
-+    }
-+
-+    logger.info("Changes detected, proceeding with review", {
-+      diffLength: diff.length,
-+      linesChanged: diff.split("\n").length,
-+    });
-+
-+    const guidelines = await getGuidelines();
-+    const { review, cost, score } = await reviewCode(diff, guidelines);
-+
-+    logger.info("Review analysis completed", {
-+      qualityScore: score,
-+      aiCostUSD: cost.toFixed(6),
-+      reviewSummary: review.summary,
-+      inlineCommentsCount: review.inlineComments.length,
-+    });
-+
-+    // Post to both platforms if configured
-+    const promises = [];
-+
-+    if (GITHUB_REPO && PR_NUMBER) {
-+      promises.push(postReviewToGithub(review, cost, score));
-+    }
-+
-+    if (promises.length === 0) {
-+      logger.warn(
-+        "No PR/MR configuration found. Review generated but not posted."
-+      );
-+      logger.info("\n=== Generated Review ===");
-+      logger.info(`Summary: ${review.summary}`);
-+      logger.info(`General Comments: ${review.generalComments}`);
-+      logger.info(`Inline Comments: ${review.inlineComments.length}`);
-+      review.inlineComments.forEach((comment, index) => {
-+        logger.info(
-+          `  ${index + 1}. ${comment.path}:${comment.line} - ${comment.issue}`
-+        );
-+      });
-+      logger.info("\n=== Review Analytics ===");
-+      logger.info(`Quality Score: ${score}/100`);
-+      logger.info(`AI Cost: $${cost.toFixed(6)} USD`);
-+      logger.info(`Model: GPT-4o-mini`);
-+      logger.info("\n=== End Review ===");
-+      process.exit(0);
-+    }
-+
-+    await Promise.all(promises);
-+    logger.info("Code review process completed successfully");
-+    process.exit(0);
-+  } catch (err) {
-+    logger.error("Code review process failed", {
-+      error: err instanceof Error ? err.message : "Unknown error",
-+    });
-+    process.exit(1);
-+  }
-+})();
-diff --git a/src/utils.ts b/src/utils.ts
-new file mode 100644
-index 0000000..137c285
---- /dev/null
-+++ b/src/utils.ts
-@@ -0,0 +1,5 @@
-+import * as fs from "fs";
-+
-+export const getFileContent = (filePath: string) => {
-+  return fs.readFileSync(filePath, "utf-8");
-+};
-diff --git a/src/main.ts b/src/main.ts
-new file mode 100644
-index 0000000..e65225f
---- /dev/null
-+++ b/src/main.ts
-@@ -0,0 +1,44 @@
-+import { openai } from "@ai-sdk/openai";
-+import { Agent, MCPConfiguration, VoltAgent } from "@voltagent/core";
-+import { createPinoLogger } from "@voltagent/logger";
-+import { VercelAIProvider } from "@voltagent/vercel-ai";
-+import { configuration } from "./configulation";
-+import { getFileContent } from "./utils";
-+
-+const mcpConfig = new MCPConfiguration({
-+  servers: {
-+    github: {
-+      type: "http",
-+      url: "https://api.githubcopilot.com/mcp/",
-+      requestInit: {
-+        headers: {
-+          Authorization: `Bearer ${configuration.github.token}`,
-+        },
-+      },
-+    },
-+  },
-+});
-+
-+const systemPrompt = getFileContent("./guidelines/general.md");
-+console.log(`debug:systemPrompt`, systemPrompt);
-+
-+const agent = new Agent({
-+  name: "Code Review Agent",
-+  description: systemPrompt,
-+  llm: new VercelAIProvider(),
-+  model: openai("gpt-4o-mini"),
-+  tools: await mcpConfig.getTools(),
-+});
-+
-+// Create logger
-+const logger = createPinoLogger({
-+  name: "code-review-agent",
-+  level: "info",
-+});
-+
-+new VoltAgent({
-+  agents: {
-+    agent,
-+  },
-+  logger,
-+});
-diff --git a/yarn.lock b/yarn.lock
-index 837a55c..e57982d 100644
---- a/yarn.lock
-+++ b/yarn.lock
-@@ -2,6 +2,14 @@
-# yarn lockfile v1
-
-
-+"@ai-sdk/anthropic@^2.0.2":
-+  version "2.0.2"
-+  resolved "https://registry.npmjs.org/@ai-sdk/anthropic/-/anthropic-2.0.2.tgz"
-+  integrity sha512-R3xmEbbntgdKo/S3TDuW77RYALpo/OKQm4oSjQmryDAFiVGB6X6guZAr7FWt48C4fKGROScAu+y1MJTbzisfOQ==
-+  dependencies:
-+    "@ai-sdk/provider" "2.0.0"
-+    "@ai-sdk/provider-utils" "3.0.2"
-+
-"@ai-sdk/gateway@1.0.4":
-  version "1.0.4"
-  resolved "https://registry.npmjs.org/@ai-sdk/gateway/-/gateway-1.0.4.tgz"
-@@ -45,6 +53,16 @@
-    eventsource-parser "^3.0.3"
-    zod-to-json-schema "^3.24.1"
-
-+"@ai-sdk/provider-utils@3.0.2":
-+  version "3.0.2"
-+  resolved "https://registry.npmjs.org/@ai-sdk/provider-utils/-/provider-utils-3.0.2.tgz"
-+  integrity sha512-0a5a6VafkV6+0irdpqnub8WE6qzG2VMsDBpXb9NQIz8c4TG8fI+GSTFIL9sqrLEwXrHdiRj7fwJsrir4jClL0w==
-+  dependencies:
-+    "@ai-sdk/provider" "2.0.0"
-+    "@standard-schema/spec" "^1.0.0"
-+    eventsource-parser "^3.0.3"
-+    zod-to-json-schema "^3.24.1"
-+
-"@ai-sdk/provider@1.1.3":
-  version "1.1.3"
-  resolved "https://registry.npmjs.org/@ai-sdk/provider/-/provider-1.1.3.tgz"
-```
diff --git a/src/configuration.ts b/src/configuration.ts
index 794a6e6..c74a26c 100644
--- a/src/configuration.ts
+++ b/src/configuration.ts
@@ -2,7 +2,6 @@ export interface Configuration {
   github: {
     token: string;
     repo: string;
-    prNumber: string;
   };
   slack: {
     webhookUrl: string;
@@ -22,7 +21,6 @@ export const configuration: Configuration = {
   github: {
     token: process.env.GITHUB_TOKEN || "",
     repo: process.env.GITHUB_REPO || "",
-    prNumber: process.env.PR_NUMBER || "",
   },
   slack: {
     webhookUrl: process.env.SLACK_WEBHOOK_URL || "",
diff --git a/src/main.ts b/src/main.ts
index e7e1b79..e57eaef 100644
--- a/src/main.ts
+++ b/src/main.ts
@@ -1,87 +1,63 @@
+import { openai } from "@ai-sdk/openai";
+import { Agent, VoltAgent, createTool } from "@voltagent/core";
 import { createPinoLogger } from "@voltagent/logger";
-import express from "express";
-import { configuration, updateConfigurationFromWebhook } from "./configuration";
-import { performCodeReview } from "./review-engine";
-
-const app = express();
-const port = configuration.server.port;
+import { VercelAIProvider } from "@voltagent/vercel-ai";
+import { z } from "zod";
+import { sendSlackNotification } from "./slack";
 
 // Create logger
 const logger = createPinoLogger({
-  name: "webhook-server",
+  name: "technical-agent",
   level: "info",
 });
 
-// Middleware
-app.use(express.json());
-
-// Health check endpoint
-app.get("/health", (_req, res) => {
-  res.json({ status: "ok", timestamp: new Date().toISOString() });
-});
-
-// GitHub webhook endpoint
-app.get("/webhook/github", (_req, res) => {
-  res.json({ status: "ok", timestamp: new Date().toISOString() });
-});
-
-app.post("/webhook/github", async (req, res) => {
-  try {
-    const event = req.headers["x-github-event"];
-    const payload = req.body;
-
-    logger.info(`Received GitHub webhook: ${event}`);
-
-    // Only process push events
-    if (event === "push") {
-      const { repository, ref, pusher } = payload;
-
-      logger.info(
-        `Processing push event - Repo: ${repository?.full_name}, Branch: ${ref}, Pusher: ${pusher?.name}`
+// Define a calculator tool
+const slackSendMessageTool = createTool({
+  name: "slack-send-message",
+  description: "Send a message to Slack",
+  parameters: z.object({
+    message: z.string().describe("message"),
+  }),
+  execute: async (args) => {
+    try {
+      console.log(`debug:args`, args);
+
+      const result = await sendSlackNotification({
+        blocks: [
+          {
+            type: "section",
+            text: {
+              type: "mrkdwn",
+              text: args.message,
+            },
+          },
+        ],
+      });
+      return { result };
+    } catch (e) {
+      console.log(`debug:e`, e);
+
+      const errorMessage = e instanceof Error ? e.message : String(e);
+
+      throw new Error(
+        `Failed to send message to Slack: ${args.message}. Error: ${errorMessage}`
       );
-
-      // Skip if push is to main branch (we compare against main)
-      if (ref === "refs/heads/main") {
-        logger.info("Skipping review for main branch push");
-        res.json({ message: "Skipped main branch" });
-        return;
-      }
-
-      // Update configuration for the review
-      const repoName = repository?.full_name || "";
-      const branchName = ref?.replace("refs/heads/", "") || "";
-      updateConfigurationFromWebhook(repoName, branchName);
-
-      // Trigger code review
-      await performCodeReview();
-
-      res.json({ message: "Code review triggered" });
-    } else {
-      logger.info(`Ignoring ${event} event`);
-      res.json({ message: `Ignored ${event} event` });
     }
-  } catch (error) {
-    logger.error(
-      "Webhook processing failed: " +
-        (error instanceof Error ? error.message : String(error))
-    );
-    res.status(500).json({ error: "Internal server error" });
-  }
-});
-
-// Start server
-app.listen(port, () => {
-  logger.info(`Webhook server running on port ${port}`);
-  logger.info("Ready to receive GitHub webhooks at /webhook/github");
+  },
 });
 
-// Graceful shutdown
-process.on("SIGTERM", () => {
-  logger.info("Received SIGTERM, shutting down gracefully");
-  process.exit(0);
+const agent = new Agent({
+  name: "TechnicalAgent",
+  description:
+    "A helpful assistant that can review code and send messages to Slack",
+  llm: new VercelAIProvider(),
+  model: openai("gpt-4.1-mini"),
+  tools: [slackSendMessageTool],
 });
 
-process.on("SIGINT", () => {
-  logger.info("Received SIGINT, shutting down gracefully");
-  process.exit(0);
+new VoltAgent({
+  agents: {
+    agent,
+  },
+  logger,
 });
diff --git a/test-webhook.sh b/test-webhook.sh
deleted file mode 100755
index d45a13f..0000000
--- a/test-webhook.sh
+++ /dev/null
@@ -1,37 +0,0 @@
-#!/bin/bash
-
-echo "Testing webhook server..."
-
-# Test health check
-echo "1. Health check:"
-curl -s http://localhost:3000/health | jq .
-
-echo -e "\n2. Test GitHub webhook (push event):"
-curl -X POST http://localhost:3000/webhook/github \
-  -H "Content-Type: application/json" \
-  -H "X-GitHub-Event: push" \
-  -d '{
-    "repository": {
-      "full_name": "test/repo"
-    },
-    "ref": "refs/heads/feature-branch",
-    "pusher": {
-      "name": "testuser"
-    }
-  }' | jq .
-
-echo -e "\n3. Test main branch push (should be ignored):"
-curl -X POST http://localhost:3000/webhook/github \
-  -H "Content-Type: application/json" \
-  -H "X-GitHub-Event: push" \
-  -d '{
-    "repository": {
-      "full_name": "test/repo"
-    },
-    "ref": "refs/heads/main",
-    "pusher": {
-      "name": "testuser"
-    }
-  }' | jq .
-
-echo -e "\nWebhook tests completed!"
\ No newline at end of file
